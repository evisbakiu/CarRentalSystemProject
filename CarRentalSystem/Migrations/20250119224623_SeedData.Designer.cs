// <auto-generated />
using System;
using CarRentalSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRentalSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250119224623_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarRentalSystem.Models.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FuelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FuelUsage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Gearbox")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LicensePlate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClassId");

                    b.ToTable("Car");

                    b.HasData(
                        new
                        {
                            Id = new Guid("955172b4-fa59-4a11-8367-29fa3ca2a566"),
                            CategoryId = new Guid("919d30a8-0a60-4be9-bc41-8422070f0a37"),
                            ClassId = new Guid("fabafed1-9716-4b90-975a-d1aa4cfbfd99"),
                            FuelType = "Petrol",
                            FuelUsage = 4m,
                            Gearbox = "Manual",
                            ImagePath = "/images/fiat_panda.jpg",
                            IsAvailable = true,
                            LicensePlate = "AA-111-BB",
                            Name = "Fiat Panda",
                            PricePerDay = 12m,
                            Year = 2020
                        },
                        new
                        {
                            Id = new Guid("edf0d66f-745e-473a-9b92-b64c960c1c04"),
                            CategoryId = new Guid("919d30a8-0a60-4be9-bc41-8422070f0a37"),
                            ClassId = new Guid("fabafed1-9716-4b90-975a-d1aa4cfbfd99"),
                            FuelType = "Petrol",
                            FuelUsage = 3.8m,
                            Gearbox = "Manual",
                            ImagePath = "/images/hyundai_i10.jpg",
                            IsAvailable = true,
                            LicensePlate = "BB-222-CC",
                            Name = "Hyundai i10",
                            PricePerDay = 10m,
                            Year = 2019
                        },
                        new
                        {
                            Id = new Guid("a8cc813d-ad3a-41e5-82b1-05ea96be6661"),
                            CategoryId = new Guid("d1e3e1df-b0b3-4d4a-859f-d673207cda56"),
                            ClassId = new Guid("f6b7a80f-9104-419a-b978-5494c2e2d2d4"),
                            FuelType = "Diesel",
                            FuelUsage = 5.1m,
                            Gearbox = "Automatic",
                            ImagePath = "/images/vw_golf.jpg",
                            IsAvailable = true,
                            LicensePlate = "CC-333-DD",
                            Name = "Volkswagen Golf",
                            PricePerDay = 18m,
                            Year = 2021
                        },
                        new
                        {
                            Id = new Guid("dbf27af0-42da-44fe-92b4-180e5de3117a"),
                            CategoryId = new Guid("d1e3e1df-b0b3-4d4a-859f-d673207cda56"),
                            ClassId = new Guid("f6b7a80f-9104-419a-b978-5494c2e2d2d4"),
                            FuelType = "Petrol",
                            FuelUsage = 4.8m,
                            Gearbox = "Manual",
                            ImagePath = "/images/ford_focus.jpg",
                            IsAvailable = true,
                            LicensePlate = "DD-444-EE",
                            Name = "Ford Focus",
                            PricePerDay = 17m,
                            Year = 2020
                        },
                        new
                        {
                            Id = new Guid("27bddea7-60ad-4c0f-9c9a-73e91cf19420"),
                            CategoryId = new Guid("e626bca7-a3af-4316-8af5-75eddb8a96f6"),
                            ClassId = new Guid("42fa5c5e-3dfa-482e-bc7b-5ca8adeb42fd"),
                            FuelType = "Hybrid",
                            FuelUsage = 4.2m,
                            Gearbox = "Automatic",
                            ImagePath = "/images/toyota_rav4.jpg",
                            IsAvailable = true,
                            LicensePlate = "EE-555-FF",
                            Name = "Toyota RAV4",
                            PricePerDay = 25m,
                            Year = 2022
                        },
                        new
                        {
                            Id = new Guid("9504af07-bf29-4774-a410-49e606c5dc7c"),
                            CategoryId = new Guid("e626bca7-a3af-4316-8af5-75eddb8a96f6"),
                            ClassId = new Guid("42fa5c5e-3dfa-482e-bc7b-5ca8adeb42fd"),
                            FuelType = "Petrol",
                            FuelUsage = 6m,
                            Gearbox = "Automatic",
                            ImagePath = "/images/honda_crv.jpg",
                            IsAvailable = true,
                            LicensePlate = "FF-666-GG",
                            Name = "Honda CR-V",
                            PricePerDay = 27m,
                            Year = 2023
                        },
                        new
                        {
                            Id = new Guid("14e8371b-e721-4407-bfc5-92f83202dd15"),
                            CategoryId = new Guid("fc85e257-ae4c-4d34-9ebb-b0b829ee8b40"),
                            ClassId = new Guid("eee6fff9-182a-4ae0-8082-e817ad89240b"),
                            FuelType = "Petrol",
                            FuelUsage = 9m,
                            Gearbox = "Automatic",
                            ImagePath = "/images/mercedes_s_class.jpg",
                            IsAvailable = true,
                            LicensePlate = "GG-777-HH",
                            Name = "Mercedes-Benz S-Class",
                            PricePerDay = 85m,
                            Year = 2023
                        },
                        new
                        {
                            Id = new Guid("786e2218-4650-4af8-bbfa-e9d6481c7788"),
                            CategoryId = new Guid("72ae016b-5002-4b4c-b599-7a6469993f0a"),
                            ClassId = new Guid("eee6fff9-182a-4ae0-8082-e817ad89240b"),
                            FuelType = "Diesel",
                            FuelUsage = 8.5m,
                            Gearbox = "Automatic",
                            ImagePath = "/images/bmw_7_series.jpg",
                            IsAvailable = true,
                            LicensePlate = "HH-888-II",
                            Name = "BMW 7 Series",
                            PricePerDay = 80m,
                            Year = 2023
                        },
                        new
                        {
                            Id = new Guid("a8a74f6e-ba18-4ace-8e1e-d19087e9a72f"),
                            CategoryId = new Guid("e626bca7-a3af-4316-8af5-75eddb8a96f6"),
                            ClassId = new Guid("dcffb19b-e96f-414c-9f13-f685dbe5c12e"),
                            FuelType = "Diesel",
                            FuelUsage = 8m,
                            Gearbox = "Manual",
                            ImagePath = "/images/vw_transporter.jpg",
                            IsAvailable = true,
                            LicensePlate = "II-999-JJ",
                            Name = "Volkswagen Transporter",
                            PricePerDay = 40m,
                            Year = 2021
                        },
                        new
                        {
                            Id = new Guid("c9724455-7c47-4a34-bcf8-3dda661b9af3"),
                            CategoryId = new Guid("e626bca7-a3af-4316-8af5-75eddb8a96f6"),
                            ClassId = new Guid("dcffb19b-e96f-414c-9f13-f685dbe5c12e"),
                            FuelType = "Diesel",
                            FuelUsage = 7.5m,
                            Gearbox = "Manual",
                            ImagePath = "/images/ford_transit.jpg",
                            IsAvailable = true,
                            LicensePlate = "JJ-101-KK",
                            Name = "Ford Transit",
                            PricePerDay = 38m,
                            Year = 2022
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Models.CarClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarClass");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fabafed1-9716-4b90-975a-d1aa4cfbfd99"),
                            Name = "Small"
                        },
                        new
                        {
                            Id = new Guid("f6b7a80f-9104-419a-b978-5494c2e2d2d4"),
                            Name = "Compact"
                        },
                        new
                        {
                            Id = new Guid("42fa5c5e-3dfa-482e-bc7b-5ca8adeb42fd"),
                            Name = "SUV"
                        },
                        new
                        {
                            Id = new Guid("eee6fff9-182a-4ae0-8082-e817ad89240b"),
                            Name = "Luxury"
                        },
                        new
                        {
                            Id = new Guid("dcffb19b-e96f-414c-9f13-f685dbe5c12e"),
                            Name = "Van"
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Models.CarFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarFeature");

                    b.HasData(
                        new
                        {
                            Id = new Guid("36813636-dd15-42da-ad00-34130c4e3f96"),
                            CarId = new Guid("955172b4-fa59-4a11-8367-29fa3ca2a566"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("2a65f00c-8777-4587-b846-eb8985c7b4d2"),
                            CarId = new Guid("955172b4-fa59-4a11-8367-29fa3ca2a566"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("8cbc28d6-912d-44d1-bc7f-14458b5c18b2"),
                            CarId = new Guid("955172b4-fa59-4a11-8367-29fa3ca2a566"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("c768da70-33ec-4f96-a614-e1511a16b305"),
                            CarId = new Guid("955172b4-fa59-4a11-8367-29fa3ca2a566"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("34f69403-ee66-4319-8d88-24993a5f8812"),
                            CarId = new Guid("edf0d66f-745e-473a-9b92-b64c960c1c04"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("dcf05b6e-c5c3-4408-aaab-b537e9b67a0c"),
                            CarId = new Guid("edf0d66f-745e-473a-9b92-b64c960c1c04"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("7c3b1325-0b52-4b2f-992f-a1a884016992"),
                            CarId = new Guid("edf0d66f-745e-473a-9b92-b64c960c1c04"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("89a432c5-f35a-4503-ab77-02290a79c9d6"),
                            CarId = new Guid("edf0d66f-745e-473a-9b92-b64c960c1c04"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("839dd559-0831-45e1-b344-f4e4526f17c2"),
                            CarId = new Guid("a8cc813d-ad3a-41e5-82b1-05ea96be6661"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("df5dfdca-2afc-487e-b18e-bd90aa42a77f"),
                            CarId = new Guid("a8cc813d-ad3a-41e5-82b1-05ea96be6661"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("1abb0070-d6f2-4485-81d9-353201ea73a1"),
                            CarId = new Guid("a8cc813d-ad3a-41e5-82b1-05ea96be6661"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("6614ccd8-d682-45f0-9161-5cfb4380c7fd"),
                            CarId = new Guid("a8cc813d-ad3a-41e5-82b1-05ea96be6661"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("c73dff10-885a-404f-ae5c-08f8f982e469"),
                            CarId = new Guid("dbf27af0-42da-44fe-92b4-180e5de3117a"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("685b6fb1-71af-44ef-a8e5-aa80b6443cd4"),
                            CarId = new Guid("dbf27af0-42da-44fe-92b4-180e5de3117a"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("2889a221-08ff-4052-b36a-502b920c1e3f"),
                            CarId = new Guid("dbf27af0-42da-44fe-92b4-180e5de3117a"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("85003d6d-3946-46bf-afed-1f81ab4d5e88"),
                            CarId = new Guid("dbf27af0-42da-44fe-92b4-180e5de3117a"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("fc4f54ef-1ec0-4721-917b-6286fa0c0a35"),
                            CarId = new Guid("27bddea7-60ad-4c0f-9c9a-73e91cf19420"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("a0729afa-9703-4740-ab6e-6a9226066c98"),
                            CarId = new Guid("27bddea7-60ad-4c0f-9c9a-73e91cf19420"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("a07dca6e-6214-426b-8d5a-fdcaf80185d0"),
                            CarId = new Guid("27bddea7-60ad-4c0f-9c9a-73e91cf19420"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("46a94eaa-0e5c-4aa4-a4d1-f1327549c092"),
                            CarId = new Guid("27bddea7-60ad-4c0f-9c9a-73e91cf19420"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("70e9c956-25e4-4437-ad7c-0cb736cfa723"),
                            CarId = new Guid("9504af07-bf29-4774-a410-49e606c5dc7c"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("c196298e-a4e3-46b8-be09-a652347bf0eb"),
                            CarId = new Guid("9504af07-bf29-4774-a410-49e606c5dc7c"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("2aa8f3f0-4299-4618-a9b9-3e0da526f356"),
                            CarId = new Guid("9504af07-bf29-4774-a410-49e606c5dc7c"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("41271ddc-c732-4049-a707-efd0933ae152"),
                            CarId = new Guid("9504af07-bf29-4774-a410-49e606c5dc7c"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("f4c6b332-8c4d-4835-a13d-fe479bfa0f95"),
                            CarId = new Guid("14e8371b-e721-4407-bfc5-92f83202dd15"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("bcf53c18-69cc-494b-964b-79e7cdf83bf1"),
                            CarId = new Guid("14e8371b-e721-4407-bfc5-92f83202dd15"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("7411bad5-ee8d-432e-9d17-e626426b94cd"),
                            CarId = new Guid("14e8371b-e721-4407-bfc5-92f83202dd15"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("02177695-1885-44b7-9924-2edf325140ac"),
                            CarId = new Guid("14e8371b-e721-4407-bfc5-92f83202dd15"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("f6ead864-732a-4637-a13a-207b587b49e3"),
                            CarId = new Guid("786e2218-4650-4af8-bbfa-e9d6481c7788"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("5327954f-df5a-43de-bff9-91ddd5da12eb"),
                            CarId = new Guid("786e2218-4650-4af8-bbfa-e9d6481c7788"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("4510164a-bd2d-4f2c-bf37-78fd1347c03d"),
                            CarId = new Guid("786e2218-4650-4af8-bbfa-e9d6481c7788"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("4389ce0a-1a7a-47ad-854a-c5d1aaaedc95"),
                            CarId = new Guid("786e2218-4650-4af8-bbfa-e9d6481c7788"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("3b791f20-4a08-413a-bc34-27c272d1dd48"),
                            CarId = new Guid("a8a74f6e-ba18-4ace-8e1e-d19087e9a72f"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("9fc316fb-1d5c-4804-b7a2-dace50be3ffb"),
                            CarId = new Guid("a8a74f6e-ba18-4ace-8e1e-d19087e9a72f"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("421bb528-c236-472d-821d-db6d66e1c5ef"),
                            CarId = new Guid("a8a74f6e-ba18-4ace-8e1e-d19087e9a72f"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("917864bb-8597-4b8d-a1e1-922c48053b4d"),
                            CarId = new Guid("a8a74f6e-ba18-4ace-8e1e-d19087e9a72f"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("2b430bc4-55a5-46b9-a877-45e56410dd27"),
                            CarId = new Guid("c9724455-7c47-4a34-bcf8-3dda661b9af3"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("b1aa972f-182f-4537-814d-c112979a6e21"),
                            CarId = new Guid("c9724455-7c47-4a34-bcf8-3dda661b9af3"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("5c987387-55c4-4be8-962b-caf50e3f8aac"),
                            CarId = new Guid("c9724455-7c47-4a34-bcf8-3dda661b9af3"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("a81ce5ff-886f-46db-80f0-fed14061e091"),
                            CarId = new Guid("c9724455-7c47-4a34-bcf8-3dda661b9af3"),
                            Name = "Electric Windows"
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = new Guid("919d30a8-0a60-4be9-bc41-8422070f0a37"),
                            Name = "Economy"
                        },
                        new
                        {
                            Id = new Guid("d1e3e1df-b0b3-4d4a-859f-d673207cda56"),
                            Name = "Standard"
                        },
                        new
                        {
                            Id = new Guid("fc85e257-ae4c-4d34-9ebb-b0b829ee8b40"),
                            Name = "Luxury"
                        },
                        new
                        {
                            Id = new Guid("72ae016b-5002-4b4c-b599-7a6469993f0a"),
                            Name = "Business"
                        },
                        new
                        {
                            Id = new Guid("e626bca7-a3af-4316-8af5-75eddb8a96f6"),
                            Name = "Family"
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReservationId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId1");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("CarRentalSystem.Models.PricingTier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxDays")
                        .HasColumnType("int");

                    b.Property<int>("MinDays")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("PricingTier");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c15bdab-4deb-440f-b7ba-d910db6cdbb8"),
                            CarId = new Guid("955172b4-fa59-4a11-8367-29fa3ca2a566"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 12m
                        },
                        new
                        {
                            Id = new Guid("4d86f19c-2746-4dd6-a019-fcd9ecb0c98f"),
                            CarId = new Guid("955172b4-fa59-4a11-8367-29fa3ca2a566"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 10.8m
                        },
                        new
                        {
                            Id = new Guid("4f6c5651-4cd2-478d-b6c5-72878211883e"),
                            CarId = new Guid("955172b4-fa59-4a11-8367-29fa3ca2a566"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 10.20m
                        },
                        new
                        {
                            Id = new Guid("2f0c6679-f759-48f2-99ff-1da965535eb7"),
                            CarId = new Guid("955172b4-fa59-4a11-8367-29fa3ca2a566"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 9.6m
                        },
                        new
                        {
                            Id = new Guid("845dc46a-d0ed-41c5-a174-7ac837b7fb85"),
                            CarId = new Guid("955172b4-fa59-4a11-8367-29fa3ca2a566"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 9.00m
                        },
                        new
                        {
                            Id = new Guid("176109b7-7c4c-4d71-948c-dfd18a378f12"),
                            CarId = new Guid("edf0d66f-745e-473a-9b92-b64c960c1c04"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 10m
                        },
                        new
                        {
                            Id = new Guid("01138ed1-f463-4631-a25e-7eae1fd5bb42"),
                            CarId = new Guid("edf0d66f-745e-473a-9b92-b64c960c1c04"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 9.0m
                        },
                        new
                        {
                            Id = new Guid("3bfec33c-166c-4d54-9203-a6e2fc8c6533"),
                            CarId = new Guid("edf0d66f-745e-473a-9b92-b64c960c1c04"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 8.50m
                        },
                        new
                        {
                            Id = new Guid("9df918e1-5234-4303-a24a-dd7d43cde1de"),
                            CarId = new Guid("edf0d66f-745e-473a-9b92-b64c960c1c04"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 8.0m
                        },
                        new
                        {
                            Id = new Guid("610a5421-c436-4e12-8de3-096e718afe29"),
                            CarId = new Guid("edf0d66f-745e-473a-9b92-b64c960c1c04"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 7.50m
                        },
                        new
                        {
                            Id = new Guid("c0164532-4bb4-40c2-a7d6-8c5c4949f66c"),
                            CarId = new Guid("a8cc813d-ad3a-41e5-82b1-05ea96be6661"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 18m
                        },
                        new
                        {
                            Id = new Guid("79e9876d-d87f-49f1-8793-067cbfdf785e"),
                            CarId = new Guid("a8cc813d-ad3a-41e5-82b1-05ea96be6661"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 16.2m
                        },
                        new
                        {
                            Id = new Guid("094ca8b3-ca7e-40f8-81d6-bd23bed0b997"),
                            CarId = new Guid("a8cc813d-ad3a-41e5-82b1-05ea96be6661"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 15.30m
                        },
                        new
                        {
                            Id = new Guid("b57f6a57-7154-4df1-b1da-71e50f410f87"),
                            CarId = new Guid("a8cc813d-ad3a-41e5-82b1-05ea96be6661"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 14.4m
                        },
                        new
                        {
                            Id = new Guid("ecee0a2e-fecf-46a6-be2d-242ca501ddad"),
                            CarId = new Guid("a8cc813d-ad3a-41e5-82b1-05ea96be6661"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 13.50m
                        },
                        new
                        {
                            Id = new Guid("c9c56ef5-29cf-4ef1-82b3-924daa73c502"),
                            CarId = new Guid("dbf27af0-42da-44fe-92b4-180e5de3117a"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 17m
                        },
                        new
                        {
                            Id = new Guid("e0058cee-4746-4f01-893e-b004f43ec0b8"),
                            CarId = new Guid("dbf27af0-42da-44fe-92b4-180e5de3117a"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 15.3m
                        },
                        new
                        {
                            Id = new Guid("decbc42d-7518-482b-874e-7c4724a3e654"),
                            CarId = new Guid("dbf27af0-42da-44fe-92b4-180e5de3117a"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 14.45m
                        },
                        new
                        {
                            Id = new Guid("ead9d517-ebb3-420d-a72b-a27c8cfb7c45"),
                            CarId = new Guid("dbf27af0-42da-44fe-92b4-180e5de3117a"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 13.6m
                        },
                        new
                        {
                            Id = new Guid("2165262f-eb91-4471-9002-4db5d1712125"),
                            CarId = new Guid("dbf27af0-42da-44fe-92b4-180e5de3117a"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 12.75m
                        },
                        new
                        {
                            Id = new Guid("758251ca-7f6e-4e60-bc48-e04af4bf2e1a"),
                            CarId = new Guid("27bddea7-60ad-4c0f-9c9a-73e91cf19420"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 25m
                        },
                        new
                        {
                            Id = new Guid("66553731-66ec-4fa1-b733-824c675217ac"),
                            CarId = new Guid("27bddea7-60ad-4c0f-9c9a-73e91cf19420"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 22.5m
                        },
                        new
                        {
                            Id = new Guid("2d50abbb-483c-40d3-89f7-00c0b16b2bec"),
                            CarId = new Guid("27bddea7-60ad-4c0f-9c9a-73e91cf19420"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 21.25m
                        },
                        new
                        {
                            Id = new Guid("4f593c90-fd75-462c-939b-399c733da6c4"),
                            CarId = new Guid("27bddea7-60ad-4c0f-9c9a-73e91cf19420"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 20.0m
                        },
                        new
                        {
                            Id = new Guid("a47a828d-f2f3-47c8-8e0e-8b304386b361"),
                            CarId = new Guid("27bddea7-60ad-4c0f-9c9a-73e91cf19420"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 18.75m
                        },
                        new
                        {
                            Id = new Guid("4d6bb027-e953-48dc-ba22-4bb68b5de0f1"),
                            CarId = new Guid("9504af07-bf29-4774-a410-49e606c5dc7c"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 27m
                        },
                        new
                        {
                            Id = new Guid("ab969447-3f91-4827-9148-c8e5ffbc53c6"),
                            CarId = new Guid("9504af07-bf29-4774-a410-49e606c5dc7c"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 24.3m
                        },
                        new
                        {
                            Id = new Guid("e7d0f5cb-974e-4e7a-8acc-4bb3cfddc3e9"),
                            CarId = new Guid("9504af07-bf29-4774-a410-49e606c5dc7c"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 22.95m
                        },
                        new
                        {
                            Id = new Guid("ef3ae690-d5f9-4966-8a1e-138a9716febd"),
                            CarId = new Guid("9504af07-bf29-4774-a410-49e606c5dc7c"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 21.6m
                        },
                        new
                        {
                            Id = new Guid("53040332-3dda-48ef-836d-8ee64de3d722"),
                            CarId = new Guid("9504af07-bf29-4774-a410-49e606c5dc7c"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 20.25m
                        },
                        new
                        {
                            Id = new Guid("cd2b781c-23b2-4bed-b1e2-bbbd5eaa3e92"),
                            CarId = new Guid("14e8371b-e721-4407-bfc5-92f83202dd15"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 85m
                        },
                        new
                        {
                            Id = new Guid("c8538439-19c8-483f-8dd8-c442e04c46a8"),
                            CarId = new Guid("14e8371b-e721-4407-bfc5-92f83202dd15"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 76.5m
                        },
                        new
                        {
                            Id = new Guid("5e517f32-b316-42eb-9d6d-51c9c85cb701"),
                            CarId = new Guid("14e8371b-e721-4407-bfc5-92f83202dd15"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 72.25m
                        },
                        new
                        {
                            Id = new Guid("bc90c786-4e2b-4231-a9c6-fb36f2ea1251"),
                            CarId = new Guid("14e8371b-e721-4407-bfc5-92f83202dd15"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 68.0m
                        },
                        new
                        {
                            Id = new Guid("d272660b-b84e-4883-a7ad-663688c8568a"),
                            CarId = new Guid("14e8371b-e721-4407-bfc5-92f83202dd15"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 63.75m
                        },
                        new
                        {
                            Id = new Guid("e07e6987-fb71-445f-8932-4ff998a5043e"),
                            CarId = new Guid("786e2218-4650-4af8-bbfa-e9d6481c7788"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 80m
                        },
                        new
                        {
                            Id = new Guid("ef6b1d20-3078-4306-9b88-8030031d91fb"),
                            CarId = new Guid("786e2218-4650-4af8-bbfa-e9d6481c7788"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 72.0m
                        },
                        new
                        {
                            Id = new Guid("81fb4ad6-d1bc-48aa-ad5c-ca5f483250ca"),
                            CarId = new Guid("786e2218-4650-4af8-bbfa-e9d6481c7788"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 68.00m
                        },
                        new
                        {
                            Id = new Guid("f1cdcdc4-b0f2-40cc-9d8e-72ee11041931"),
                            CarId = new Guid("786e2218-4650-4af8-bbfa-e9d6481c7788"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 64.0m
                        },
                        new
                        {
                            Id = new Guid("05eeb852-5a76-4d82-9fbb-710c6c6ad89f"),
                            CarId = new Guid("786e2218-4650-4af8-bbfa-e9d6481c7788"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 60.00m
                        },
                        new
                        {
                            Id = new Guid("66c1cc17-2949-42e9-bbd2-73a9c2eaf099"),
                            CarId = new Guid("a8a74f6e-ba18-4ace-8e1e-d19087e9a72f"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 40m
                        },
                        new
                        {
                            Id = new Guid("ff679268-9618-4b55-ac19-632bf9c941d5"),
                            CarId = new Guid("a8a74f6e-ba18-4ace-8e1e-d19087e9a72f"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 36.0m
                        },
                        new
                        {
                            Id = new Guid("25679e55-e11c-4642-ab0e-ab691a3ab1d0"),
                            CarId = new Guid("a8a74f6e-ba18-4ace-8e1e-d19087e9a72f"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 34.00m
                        },
                        new
                        {
                            Id = new Guid("b486b73d-06b0-47fc-bdc5-f3f2a930bdf6"),
                            CarId = new Guid("a8a74f6e-ba18-4ace-8e1e-d19087e9a72f"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 32.0m
                        },
                        new
                        {
                            Id = new Guid("511546ed-0201-4c4d-b06c-75d950a28de2"),
                            CarId = new Guid("a8a74f6e-ba18-4ace-8e1e-d19087e9a72f"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 30.00m
                        },
                        new
                        {
                            Id = new Guid("fa268a36-7915-4620-a940-2ea7e188d6db"),
                            CarId = new Guid("c9724455-7c47-4a34-bcf8-3dda661b9af3"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 38m
                        },
                        new
                        {
                            Id = new Guid("bb32ac30-c816-4715-b693-3eb7e8ce232d"),
                            CarId = new Guid("c9724455-7c47-4a34-bcf8-3dda661b9af3"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 34.2m
                        },
                        new
                        {
                            Id = new Guid("97f09e3a-35bb-4a84-bcb1-9b00c98eb6b7"),
                            CarId = new Guid("c9724455-7c47-4a34-bcf8-3dda661b9af3"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 32.30m
                        },
                        new
                        {
                            Id = new Guid("28ff1b59-1c92-42c5-a4ab-8787ae1b5dac"),
                            CarId = new Guid("c9724455-7c47-4a34-bcf8-3dda661b9af3"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 30.4m
                        },
                        new
                        {
                            Id = new Guid("4de1edb6-f476-4437-aaaa-44767f45524b"),
                            CarId = new Guid("c9724455-7c47-4a34-bcf8-3dda661b9af3"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 28.50m
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateGenerated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("CarRentalSystem.Models.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("CarRentalSystem.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarRentalSystem.Models.Car", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Category", "Category")
                        .WithMany("Cars")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalSystem.Models.CarClass", "Class")
                        .WithMany("Cars")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("CarRentalSystem.Models.CarFeature", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Car", "Car")
                        .WithMany("Features")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Payment", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId1");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("CarRentalSystem.Models.PricingTier", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Car", "Car")
                        .WithMany("PricingTiers")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Report", b =>
                {
                    b.HasOne("CarRentalSystem.Models.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Reservation", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalSystem.Models.Status", "Status")
                        .WithMany("Reservations")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalSystem.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Car");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Role", b =>
                {
                    b.HasOne("CarRentalSystem.Models.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CarRentalSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CarRentalSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CarRentalSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarRentalSystem.Models.Car", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("PricingTiers");
                });

            modelBuilder.Entity("CarRentalSystem.Models.CarClass", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Category", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Status", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("CarRentalSystem.Models.User", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using CarRentalSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRentalSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarRentalSystem.Models.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FuelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FuelUsage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Gearbox")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LicensePlate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClassId");

                    b.ToTable("Car");

                    b.HasData(
                        new
                        {
                            Id = new Guid("69e42b9b-7367-4930-8d2e-5ac756eb7aeb"),
                            CategoryId = new Guid("dc18e284-a3ff-4672-8cf2-eeb874108028"),
                            ClassId = new Guid("76f104e3-f55f-4abd-930a-920a68362c0d"),
                            FuelType = "Petrol",
                            FuelUsage = 4m,
                            Gearbox = "Manual",
                            ImagePath = "/images/fiat_panda.jpg",
                            IsAvailable = true,
                            LicensePlate = "AA-111-BB",
                            Name = "Fiat Panda",
                            PricePerDay = 12m,
                            Year = 2020
                        },
                        new
                        {
                            Id = new Guid("a0bac1b2-a871-4394-801d-406b049a2811"),
                            CategoryId = new Guid("dc18e284-a3ff-4672-8cf2-eeb874108028"),
                            ClassId = new Guid("76f104e3-f55f-4abd-930a-920a68362c0d"),
                            FuelType = "Petrol",
                            FuelUsage = 3.8m,
                            Gearbox = "Manual",
                            ImagePath = "/images/hyundai_i10.jpg",
                            IsAvailable = true,
                            LicensePlate = "BB-222-CC",
                            Name = "Hyundai i10",
                            PricePerDay = 10m,
                            Year = 2019
                        },
                        new
                        {
                            Id = new Guid("e9ae80b4-aaee-408d-a780-ca365541d291"),
                            CategoryId = new Guid("c5e18e12-be6e-41c6-9fa3-1d2c8efaa47a"),
                            ClassId = new Guid("616afdfb-ad19-4718-9b14-77358894a23e"),
                            FuelType = "Diesel",
                            FuelUsage = 5.1m,
                            Gearbox = "Automatic",
                            ImagePath = "/images/vw_golf.jpg",
                            IsAvailable = true,
                            LicensePlate = "CC-333-DD",
                            Name = "Volkswagen Golf",
                            PricePerDay = 18m,
                            Year = 2021
                        },
                        new
                        {
                            Id = new Guid("744121d7-43eb-472a-a857-475b14745ed9"),
                            CategoryId = new Guid("c5e18e12-be6e-41c6-9fa3-1d2c8efaa47a"),
                            ClassId = new Guid("616afdfb-ad19-4718-9b14-77358894a23e"),
                            FuelType = "Petrol",
                            FuelUsage = 4.8m,
                            Gearbox = "Manual",
                            ImagePath = "/images/ford_focus.jpg",
                            IsAvailable = true,
                            LicensePlate = "DD-444-EE",
                            Name = "Ford Focus",
                            PricePerDay = 17m,
                            Year = 2020
                        },
                        new
                        {
                            Id = new Guid("45e268be-d7f0-4ecd-a219-e6c5187b41ef"),
                            CategoryId = new Guid("f2e93546-78ce-46bc-b9f7-5fd19c49fe99"),
                            ClassId = new Guid("edf8edeb-5472-436f-9eaa-899df910a390"),
                            FuelType = "Hybrid",
                            FuelUsage = 4.2m,
                            Gearbox = "Automatic",
                            ImagePath = "/images/toyota_rav4.jpg",
                            IsAvailable = true,
                            LicensePlate = "EE-555-FF",
                            Name = "Toyota RAV4",
                            PricePerDay = 25m,
                            Year = 2022
                        },
                        new
                        {
                            Id = new Guid("4bc2c5db-e39a-4658-812e-bec9e00c26f5"),
                            CategoryId = new Guid("f2e93546-78ce-46bc-b9f7-5fd19c49fe99"),
                            ClassId = new Guid("edf8edeb-5472-436f-9eaa-899df910a390"),
                            FuelType = "Petrol",
                            FuelUsage = 6m,
                            Gearbox = "Automatic",
                            ImagePath = "/images/honda_crv.jpg",
                            IsAvailable = true,
                            LicensePlate = "FF-666-GG",
                            Name = "Honda CR-V",
                            PricePerDay = 27m,
                            Year = 2023
                        },
                        new
                        {
                            Id = new Guid("681bf99b-e157-496a-a43f-52934c7a271d"),
                            CategoryId = new Guid("dee98aaf-d073-400b-ac14-2216c86b5a0e"),
                            ClassId = new Guid("34b15eb8-f1bc-4aa6-a59b-957fc0785cb6"),
                            FuelType = "Petrol",
                            FuelUsage = 9m,
                            Gearbox = "Automatic",
                            ImagePath = "/images/mercedes_s_class.jpg",
                            IsAvailable = true,
                            LicensePlate = "GG-777-HH",
                            Name = "Mercedes-Benz S-Class",
                            PricePerDay = 85m,
                            Year = 2023
                        },
                        new
                        {
                            Id = new Guid("384ca78c-fed1-4614-bdfd-83ca602fe72a"),
                            CategoryId = new Guid("dbc76010-4a1d-4480-aed2-1b4ba185cc76"),
                            ClassId = new Guid("34b15eb8-f1bc-4aa6-a59b-957fc0785cb6"),
                            FuelType = "Diesel",
                            FuelUsage = 8.5m,
                            Gearbox = "Automatic",
                            ImagePath = "/images/bmw_7_series.jpg",
                            IsAvailable = true,
                            LicensePlate = "HH-888-II",
                            Name = "BMW 7 Series",
                            PricePerDay = 80m,
                            Year = 2023
                        },
                        new
                        {
                            Id = new Guid("37e46a14-7cdd-4717-ac86-ada2efaab0ee"),
                            CategoryId = new Guid("f2e93546-78ce-46bc-b9f7-5fd19c49fe99"),
                            ClassId = new Guid("444fb1a7-a34c-4147-9a9b-804cc5c351c9"),
                            FuelType = "Diesel",
                            FuelUsage = 8m,
                            Gearbox = "Manual",
                            ImagePath = "/images/vw_transporter.jpg",
                            IsAvailable = true,
                            LicensePlate = "II-999-JJ",
                            Name = "Volkswagen Transporter",
                            PricePerDay = 40m,
                            Year = 2021
                        },
                        new
                        {
                            Id = new Guid("1e1d9a0f-1d9c-4556-a016-fd01dc77343f"),
                            CategoryId = new Guid("f2e93546-78ce-46bc-b9f7-5fd19c49fe99"),
                            ClassId = new Guid("444fb1a7-a34c-4147-9a9b-804cc5c351c9"),
                            FuelType = "Diesel",
                            FuelUsage = 7.5m,
                            Gearbox = "Manual",
                            ImagePath = "/images/ford_transit.jpg",
                            IsAvailable = true,
                            LicensePlate = "JJ-101-KK",
                            Name = "Ford Transit",
                            PricePerDay = 38m,
                            Year = 2022
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Models.CarClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarClass");

                    b.HasData(
                        new
                        {
                            Id = new Guid("76f104e3-f55f-4abd-930a-920a68362c0d"),
                            Name = "Small"
                        },
                        new
                        {
                            Id = new Guid("616afdfb-ad19-4718-9b14-77358894a23e"),
                            Name = "Compact"
                        },
                        new
                        {
                            Id = new Guid("edf8edeb-5472-436f-9eaa-899df910a390"),
                            Name = "SUV"
                        },
                        new
                        {
                            Id = new Guid("34b15eb8-f1bc-4aa6-a59b-957fc0785cb6"),
                            Name = "Luxury"
                        },
                        new
                        {
                            Id = new Guid("444fb1a7-a34c-4147-9a9b-804cc5c351c9"),
                            Name = "Van"
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Models.CarFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarFeature");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dd905fff-c0e6-4079-9208-4891286404ce"),
                            CarId = new Guid("69e42b9b-7367-4930-8d2e-5ac756eb7aeb"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("a531fdfc-1745-4bf5-b5db-5a16dac0896a"),
                            CarId = new Guid("69e42b9b-7367-4930-8d2e-5ac756eb7aeb"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("ee440953-d2a7-4ae5-935f-a3d76ddf0e56"),
                            CarId = new Guid("69e42b9b-7367-4930-8d2e-5ac756eb7aeb"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("493830a0-16f2-4167-b810-4ce68581d947"),
                            CarId = new Guid("69e42b9b-7367-4930-8d2e-5ac756eb7aeb"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("d88e824d-47ea-4df0-af4d-35f230606a56"),
                            CarId = new Guid("a0bac1b2-a871-4394-801d-406b049a2811"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("85d510e5-8f76-4748-b01a-0a429d857b4f"),
                            CarId = new Guid("a0bac1b2-a871-4394-801d-406b049a2811"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("ca6b23d8-9c55-4b92-9a8e-0d76490e00cb"),
                            CarId = new Guid("a0bac1b2-a871-4394-801d-406b049a2811"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("342c9e6f-85b6-4eb8-8e56-5f68a7a7b224"),
                            CarId = new Guid("a0bac1b2-a871-4394-801d-406b049a2811"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("eeb396d4-4990-41a3-925d-c164ef67266d"),
                            CarId = new Guid("e9ae80b4-aaee-408d-a780-ca365541d291"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("05dc6d03-caab-4785-a2a8-6dea6fb52834"),
                            CarId = new Guid("e9ae80b4-aaee-408d-a780-ca365541d291"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("61c1d49d-6159-4951-8aec-d36821ff1ba1"),
                            CarId = new Guid("e9ae80b4-aaee-408d-a780-ca365541d291"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("1781fd1c-ae62-4112-b0bd-50f2fd03a01d"),
                            CarId = new Guid("e9ae80b4-aaee-408d-a780-ca365541d291"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("5a4f6d03-2d97-492f-84f9-0b57bf6aedca"),
                            CarId = new Guid("744121d7-43eb-472a-a857-475b14745ed9"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("bef87e3c-4d0e-4a61-9e11-6370ef530115"),
                            CarId = new Guid("744121d7-43eb-472a-a857-475b14745ed9"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("1d91de0d-82eb-44fc-ae64-5c6845136533"),
                            CarId = new Guid("744121d7-43eb-472a-a857-475b14745ed9"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("7b8c7022-e5bf-41e1-81ad-e2edec2a8060"),
                            CarId = new Guid("744121d7-43eb-472a-a857-475b14745ed9"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("806a3d6f-09ec-451e-bd9e-2e5bdba71a3c"),
                            CarId = new Guid("45e268be-d7f0-4ecd-a219-e6c5187b41ef"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("0b0bb88e-8a8f-4126-ad08-a4e1f225d85c"),
                            CarId = new Guid("45e268be-d7f0-4ecd-a219-e6c5187b41ef"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("73476ff2-e4aa-4a0f-a7db-620fae0276ff"),
                            CarId = new Guid("45e268be-d7f0-4ecd-a219-e6c5187b41ef"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("14afbe2d-6c83-4ba2-945e-930706c91d80"),
                            CarId = new Guid("45e268be-d7f0-4ecd-a219-e6c5187b41ef"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("5f969da3-705e-495a-9092-57cb37d5fa43"),
                            CarId = new Guid("4bc2c5db-e39a-4658-812e-bec9e00c26f5"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("eb6ab68a-d446-4516-b9e1-af73d2146702"),
                            CarId = new Guid("4bc2c5db-e39a-4658-812e-bec9e00c26f5"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("6a0e1af6-c079-41cd-be0c-e6d4b7a1a424"),
                            CarId = new Guid("4bc2c5db-e39a-4658-812e-bec9e00c26f5"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("ab0445e4-4aa5-4231-96b5-bbb80358cc4f"),
                            CarId = new Guid("4bc2c5db-e39a-4658-812e-bec9e00c26f5"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("461e195e-2838-4aa9-a9bb-493a5a748da0"),
                            CarId = new Guid("681bf99b-e157-496a-a43f-52934c7a271d"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("124e45e7-326e-4d70-846d-e46655e68f63"),
                            CarId = new Guid("681bf99b-e157-496a-a43f-52934c7a271d"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("6900da3a-3b4e-4557-a8bb-5b28e4feaa25"),
                            CarId = new Guid("681bf99b-e157-496a-a43f-52934c7a271d"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("543745aa-4174-4cd7-b509-16e312cf7493"),
                            CarId = new Guid("681bf99b-e157-496a-a43f-52934c7a271d"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("ab9a055d-820d-4c60-ae2e-cffa13ef2549"),
                            CarId = new Guid("384ca78c-fed1-4614-bdfd-83ca602fe72a"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("fd7d79e2-6b42-473d-85af-7736d1f8351b"),
                            CarId = new Guid("384ca78c-fed1-4614-bdfd-83ca602fe72a"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("deea5cac-a8f6-4743-b1b8-f7b099a49a06"),
                            CarId = new Guid("384ca78c-fed1-4614-bdfd-83ca602fe72a"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("d70bd956-95ab-459e-a34b-8a315aab5389"),
                            CarId = new Guid("384ca78c-fed1-4614-bdfd-83ca602fe72a"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("71a1bd9b-cdea-47eb-978a-73f7b0125e6d"),
                            CarId = new Guid("37e46a14-7cdd-4717-ac86-ada2efaab0ee"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("3a71f5ac-3f2b-4210-aedc-801a08f3a68e"),
                            CarId = new Guid("37e46a14-7cdd-4717-ac86-ada2efaab0ee"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("1c531aaa-0b65-466e-b9ea-96b9d8f66d16"),
                            CarId = new Guid("37e46a14-7cdd-4717-ac86-ada2efaab0ee"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("811fb172-7293-41fe-9fa7-25523ec9f5c6"),
                            CarId = new Guid("37e46a14-7cdd-4717-ac86-ada2efaab0ee"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("49eadbe5-dbd4-42e0-b7b4-c91d856e3717"),
                            CarId = new Guid("1e1d9a0f-1d9c-4556-a016-fd01dc77343f"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("a1177890-86c1-429f-8ea4-f85ad3981a37"),
                            CarId = new Guid("1e1d9a0f-1d9c-4556-a016-fd01dc77343f"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("675b4b86-79e0-4aa6-bb32-ea5e174816d9"),
                            CarId = new Guid("1e1d9a0f-1d9c-4556-a016-fd01dc77343f"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("7d8ceff2-7fbf-4cca-9031-2103910e2ef5"),
                            CarId = new Guid("1e1d9a0f-1d9c-4556-a016-fd01dc77343f"),
                            Name = "Electric Windows"
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc18e284-a3ff-4672-8cf2-eeb874108028"),
                            Name = "Economy"
                        },
                        new
                        {
                            Id = new Guid("c5e18e12-be6e-41c6-9fa3-1d2c8efaa47a"),
                            Name = "Standard"
                        },
                        new
                        {
                            Id = new Guid("dee98aaf-d073-400b-ac14-2216c86b5a0e"),
                            Name = "Luxury"
                        },
                        new
                        {
                            Id = new Guid("dbc76010-4a1d-4480-aed2-1b4ba185cc76"),
                            Name = "Business"
                        },
                        new
                        {
                            Id = new Guid("f2e93546-78ce-46bc-b9f7-5fd19c49fe99"),
                            Name = "Family"
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("CarRentalSystem.Models.PricingTier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxDays")
                        .HasColumnType("int");

                    b.Property<int>("MinDays")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("PricingTier");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a251e046-4151-4741-bb19-811974abe664"),
                            CarId = new Guid("69e42b9b-7367-4930-8d2e-5ac756eb7aeb"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 12m
                        },
                        new
                        {
                            Id = new Guid("55ce5a34-6d66-45ce-9bf2-2687bfe4c1f7"),
                            CarId = new Guid("69e42b9b-7367-4930-8d2e-5ac756eb7aeb"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 10.8m
                        },
                        new
                        {
                            Id = new Guid("6bafd4f2-0fca-473c-8056-16a31b1b3b7f"),
                            CarId = new Guid("69e42b9b-7367-4930-8d2e-5ac756eb7aeb"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 10.20m
                        },
                        new
                        {
                            Id = new Guid("14424655-60f6-4b24-adbf-72c9d7592853"),
                            CarId = new Guid("69e42b9b-7367-4930-8d2e-5ac756eb7aeb"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 9.6m
                        },
                        new
                        {
                            Id = new Guid("f0406c5d-2261-415d-a26d-611f2fb3842a"),
                            CarId = new Guid("69e42b9b-7367-4930-8d2e-5ac756eb7aeb"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 9.00m
                        },
                        new
                        {
                            Id = new Guid("1cb6afe9-a0e7-4508-9eb3-b3ba6c3ca64d"),
                            CarId = new Guid("a0bac1b2-a871-4394-801d-406b049a2811"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 10m
                        },
                        new
                        {
                            Id = new Guid("096b29c8-93f3-405b-95eb-b6bb2c57a7c8"),
                            CarId = new Guid("a0bac1b2-a871-4394-801d-406b049a2811"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 9.0m
                        },
                        new
                        {
                            Id = new Guid("31a878c8-a5c9-4e69-84f9-f128a8777566"),
                            CarId = new Guid("a0bac1b2-a871-4394-801d-406b049a2811"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 8.50m
                        },
                        new
                        {
                            Id = new Guid("ca81b5f0-f61f-49a1-80a9-6f8aa2c3fbd0"),
                            CarId = new Guid("a0bac1b2-a871-4394-801d-406b049a2811"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 8.0m
                        },
                        new
                        {
                            Id = new Guid("ae8e3cd4-680e-4fa1-aa20-fc1047a6d68f"),
                            CarId = new Guid("a0bac1b2-a871-4394-801d-406b049a2811"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 7.50m
                        },
                        new
                        {
                            Id = new Guid("349c72ee-cf20-48a2-8f84-4deceed2a35a"),
                            CarId = new Guid("e9ae80b4-aaee-408d-a780-ca365541d291"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 18m
                        },
                        new
                        {
                            Id = new Guid("a3fe52d4-0a5d-4c28-9161-cfdaf512549b"),
                            CarId = new Guid("e9ae80b4-aaee-408d-a780-ca365541d291"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 16.2m
                        },
                        new
                        {
                            Id = new Guid("93f5fcc1-d1e0-492c-b1f7-be1143878237"),
                            CarId = new Guid("e9ae80b4-aaee-408d-a780-ca365541d291"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 15.30m
                        },
                        new
                        {
                            Id = new Guid("17953514-48b3-4abe-8a68-9190f049f785"),
                            CarId = new Guid("e9ae80b4-aaee-408d-a780-ca365541d291"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 14.4m
                        },
                        new
                        {
                            Id = new Guid("7639b0a5-e721-492f-b408-1164e4252216"),
                            CarId = new Guid("e9ae80b4-aaee-408d-a780-ca365541d291"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 13.50m
                        },
                        new
                        {
                            Id = new Guid("7f51dbd4-a726-4003-8829-58d740e80f20"),
                            CarId = new Guid("744121d7-43eb-472a-a857-475b14745ed9"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 17m
                        },
                        new
                        {
                            Id = new Guid("e50df614-dfec-4163-b39d-8c257d13af4c"),
                            CarId = new Guid("744121d7-43eb-472a-a857-475b14745ed9"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 15.3m
                        },
                        new
                        {
                            Id = new Guid("fee08ba5-fd41-4768-89fd-cc976a4242a9"),
                            CarId = new Guid("744121d7-43eb-472a-a857-475b14745ed9"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 14.45m
                        },
                        new
                        {
                            Id = new Guid("1ccd2ce3-92d5-40dc-8715-094865f0e2ca"),
                            CarId = new Guid("744121d7-43eb-472a-a857-475b14745ed9"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 13.6m
                        },
                        new
                        {
                            Id = new Guid("589f355e-64d6-442f-b20c-1c8fbf2f9b9f"),
                            CarId = new Guid("744121d7-43eb-472a-a857-475b14745ed9"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 12.75m
                        },
                        new
                        {
                            Id = new Guid("1ff80723-b71c-449e-9ad0-423b005a40ff"),
                            CarId = new Guid("45e268be-d7f0-4ecd-a219-e6c5187b41ef"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 25m
                        },
                        new
                        {
                            Id = new Guid("0b24eccd-002f-42e1-8f3c-2a2b4d2f75c8"),
                            CarId = new Guid("45e268be-d7f0-4ecd-a219-e6c5187b41ef"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 22.5m
                        },
                        new
                        {
                            Id = new Guid("7f7419f7-9590-47d0-8376-021b471ca383"),
                            CarId = new Guid("45e268be-d7f0-4ecd-a219-e6c5187b41ef"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 21.25m
                        },
                        new
                        {
                            Id = new Guid("66c2e2fd-ce46-4f79-ab71-2d9468ae0ecd"),
                            CarId = new Guid("45e268be-d7f0-4ecd-a219-e6c5187b41ef"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 20.0m
                        },
                        new
                        {
                            Id = new Guid("05238982-842d-4145-89a0-6701c1357db2"),
                            CarId = new Guid("45e268be-d7f0-4ecd-a219-e6c5187b41ef"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 18.75m
                        },
                        new
                        {
                            Id = new Guid("b411413a-a6ec-4632-8e75-351a96227282"),
                            CarId = new Guid("4bc2c5db-e39a-4658-812e-bec9e00c26f5"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 27m
                        },
                        new
                        {
                            Id = new Guid("b656ef67-6579-4b0a-9cb8-bf4a3b048cf3"),
                            CarId = new Guid("4bc2c5db-e39a-4658-812e-bec9e00c26f5"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 24.3m
                        },
                        new
                        {
                            Id = new Guid("594a2286-774e-45ea-9ccc-6c7e420e97d6"),
                            CarId = new Guid("4bc2c5db-e39a-4658-812e-bec9e00c26f5"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 22.95m
                        },
                        new
                        {
                            Id = new Guid("e8a1ec8d-6ab9-4eba-9eab-1b60169c910d"),
                            CarId = new Guid("4bc2c5db-e39a-4658-812e-bec9e00c26f5"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 21.6m
                        },
                        new
                        {
                            Id = new Guid("1d45cf84-3dff-4dd8-b372-df7cbacc50ed"),
                            CarId = new Guid("4bc2c5db-e39a-4658-812e-bec9e00c26f5"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 20.25m
                        },
                        new
                        {
                            Id = new Guid("765551f2-36a5-4674-b2be-de316bb5eb2d"),
                            CarId = new Guid("681bf99b-e157-496a-a43f-52934c7a271d"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 85m
                        },
                        new
                        {
                            Id = new Guid("072506b8-a6df-4a81-aa07-c71bee5ae6d9"),
                            CarId = new Guid("681bf99b-e157-496a-a43f-52934c7a271d"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 76.5m
                        },
                        new
                        {
                            Id = new Guid("939abd05-3ff5-4a7f-bfef-ca038fc83791"),
                            CarId = new Guid("681bf99b-e157-496a-a43f-52934c7a271d"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 72.25m
                        },
                        new
                        {
                            Id = new Guid("f29456a5-9212-4925-8236-9482426cbf08"),
                            CarId = new Guid("681bf99b-e157-496a-a43f-52934c7a271d"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 68.0m
                        },
                        new
                        {
                            Id = new Guid("8c6c800f-40dc-4fae-bf36-24aee9043ca0"),
                            CarId = new Guid("681bf99b-e157-496a-a43f-52934c7a271d"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 63.75m
                        },
                        new
                        {
                            Id = new Guid("34f0f7bf-53f6-4a01-9f8f-325a456357f3"),
                            CarId = new Guid("384ca78c-fed1-4614-bdfd-83ca602fe72a"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 80m
                        },
                        new
                        {
                            Id = new Guid("281b0f74-107e-4062-8180-1a532e6df78a"),
                            CarId = new Guid("384ca78c-fed1-4614-bdfd-83ca602fe72a"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 72.0m
                        },
                        new
                        {
                            Id = new Guid("8cdb860e-6e81-4315-9ec2-8213ef63f714"),
                            CarId = new Guid("384ca78c-fed1-4614-bdfd-83ca602fe72a"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 68.00m
                        },
                        new
                        {
                            Id = new Guid("429bf382-d0a5-43b1-90d1-0b9b74405a2e"),
                            CarId = new Guid("384ca78c-fed1-4614-bdfd-83ca602fe72a"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 64.0m
                        },
                        new
                        {
                            Id = new Guid("16c69fdc-fe83-4fe2-8aae-541caf6b87ee"),
                            CarId = new Guid("384ca78c-fed1-4614-bdfd-83ca602fe72a"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 60.00m
                        },
                        new
                        {
                            Id = new Guid("d96e3676-6048-4434-95f9-1888907bb113"),
                            CarId = new Guid("37e46a14-7cdd-4717-ac86-ada2efaab0ee"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 40m
                        },
                        new
                        {
                            Id = new Guid("fbd8c958-bb35-4b8e-a034-f414894113ab"),
                            CarId = new Guid("37e46a14-7cdd-4717-ac86-ada2efaab0ee"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 36.0m
                        },
                        new
                        {
                            Id = new Guid("0e9938f7-3e9a-4b29-89c7-33fe59993555"),
                            CarId = new Guid("37e46a14-7cdd-4717-ac86-ada2efaab0ee"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 34.00m
                        },
                        new
                        {
                            Id = new Guid("19fb0f0c-7095-45fa-8ba2-14341bf20169"),
                            CarId = new Guid("37e46a14-7cdd-4717-ac86-ada2efaab0ee"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 32.0m
                        },
                        new
                        {
                            Id = new Guid("310a3d08-e2b5-4212-b09b-1ead111b9c0f"),
                            CarId = new Guid("37e46a14-7cdd-4717-ac86-ada2efaab0ee"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 30.00m
                        },
                        new
                        {
                            Id = new Guid("ebe3286c-7f8e-4206-ba99-0735ac3f9b1d"),
                            CarId = new Guid("1e1d9a0f-1d9c-4556-a016-fd01dc77343f"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 38m
                        },
                        new
                        {
                            Id = new Guid("7bb0cfb5-83b8-4c22-8b0c-ba79e2c3347f"),
                            CarId = new Guid("1e1d9a0f-1d9c-4556-a016-fd01dc77343f"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 34.2m
                        },
                        new
                        {
                            Id = new Guid("68dff33c-455c-4a36-90d0-5e00224a5c8c"),
                            CarId = new Guid("1e1d9a0f-1d9c-4556-a016-fd01dc77343f"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 32.30m
                        },
                        new
                        {
                            Id = new Guid("4b7f4a3b-0796-4e47-91ad-908f9f62a842"),
                            CarId = new Guid("1e1d9a0f-1d9c-4556-a016-fd01dc77343f"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 30.4m
                        },
                        new
                        {
                            Id = new Guid("2ae21351-e354-4ed7-941f-fc85f117df5c"),
                            CarId = new Guid("1e1d9a0f-1d9c-4556-a016-fd01dc77343f"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 28.50m
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateGenerated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("CarRentalSystem.Models.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("CarRentalSystem.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarRentalSystem.Models.Car", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Category", "Category")
                        .WithMany("Cars")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalSystem.Models.CarClass", "Class")
                        .WithMany("Cars")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("CarRentalSystem.Models.CarFeature", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Car", "Car")
                        .WithMany("Features")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Payment", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("CarRentalSystem.Models.PricingTier", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Car", "Car")
                        .WithMany("PricingTiers")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Report", b =>
                {
                    b.HasOne("CarRentalSystem.Models.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Reservation", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Car", "Car")
                        .WithMany("Reservations")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalSystem.Models.Status", "Status")
                        .WithMany("Reservations")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalSystem.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Car");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Role", b =>
                {
                    b.HasOne("CarRentalSystem.Models.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CarRentalSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CarRentalSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CarRentalSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarRentalSystem.Models.Car", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("PricingTiers");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("CarRentalSystem.Models.CarClass", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Category", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Status", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("CarRentalSystem.Models.User", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}

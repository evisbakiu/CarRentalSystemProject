// <auto-generated />
using System;
using CarRentalSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRentalSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250124063644_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarRentalSystem.Models.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FuelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FuelUsage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Gearbox")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LicensePlate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClassId");

                    b.ToTable("Car");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8039d225-76e1-4477-8236-e5c354153f91"),
                            CategoryId = new Guid("5325d50a-c054-42c2-a3f2-7dde39ae8721"),
                            ClassId = new Guid("86a055a5-19c2-48e5-9e0f-cf9c2d065a82"),
                            FuelType = "Petrol",
                            FuelUsage = 4m,
                            Gearbox = "Manual",
                            ImagePath = "/images/fiat_panda.jpg",
                            IsAvailable = true,
                            LicensePlate = "AA-111-BB",
                            Name = "Fiat Panda",
                            PricePerDay = 12m,
                            Year = 2020
                        },
                        new
                        {
                            Id = new Guid("348897f5-935a-4523-b69b-f13e9df249ab"),
                            CategoryId = new Guid("5325d50a-c054-42c2-a3f2-7dde39ae8721"),
                            ClassId = new Guid("86a055a5-19c2-48e5-9e0f-cf9c2d065a82"),
                            FuelType = "Petrol",
                            FuelUsage = 3.8m,
                            Gearbox = "Manual",
                            ImagePath = "/images/hyundai_i10.jpg",
                            IsAvailable = true,
                            LicensePlate = "BB-222-CC",
                            Name = "Hyundai i10",
                            PricePerDay = 10m,
                            Year = 2019
                        },
                        new
                        {
                            Id = new Guid("e2a5c157-5f55-4543-af53-b549a0a9e75b"),
                            CategoryId = new Guid("44a0794d-5360-42ba-a276-a1b4cac7ff6e"),
                            ClassId = new Guid("8c740178-11a2-4201-a8fb-bd35fbb7e604"),
                            FuelType = "Diesel",
                            FuelUsage = 5.1m,
                            Gearbox = "Automatic",
                            ImagePath = "/images/vw_golf.jpg",
                            IsAvailable = true,
                            LicensePlate = "CC-333-DD",
                            Name = "Volkswagen Golf",
                            PricePerDay = 18m,
                            Year = 2021
                        },
                        new
                        {
                            Id = new Guid("a185a4d2-5fc3-4c53-89d8-45c83e1a815c"),
                            CategoryId = new Guid("44a0794d-5360-42ba-a276-a1b4cac7ff6e"),
                            ClassId = new Guid("8c740178-11a2-4201-a8fb-bd35fbb7e604"),
                            FuelType = "Petrol",
                            FuelUsage = 4.8m,
                            Gearbox = "Manual",
                            ImagePath = "/images/ford_focus.jpg",
                            IsAvailable = true,
                            LicensePlate = "DD-444-EE",
                            Name = "Ford Focus",
                            PricePerDay = 17m,
                            Year = 2020
                        },
                        new
                        {
                            Id = new Guid("9587fc17-a4c6-487c-be94-b7b6fc9e3678"),
                            CategoryId = new Guid("f1e8e72b-e7eb-45b6-b288-9559047444db"),
                            ClassId = new Guid("44174ecc-ba3f-4a7f-80e2-0d4b195d6e2f"),
                            FuelType = "Hybrid",
                            FuelUsage = 4.2m,
                            Gearbox = "Automatic",
                            ImagePath = "/images/toyota_rav4.jpg",
                            IsAvailable = true,
                            LicensePlate = "EE-555-FF",
                            Name = "Toyota RAV4",
                            PricePerDay = 25m,
                            Year = 2022
                        },
                        new
                        {
                            Id = new Guid("a62d2f76-6fe0-4e21-935b-6b0e2d933f01"),
                            CategoryId = new Guid("f1e8e72b-e7eb-45b6-b288-9559047444db"),
                            ClassId = new Guid("44174ecc-ba3f-4a7f-80e2-0d4b195d6e2f"),
                            FuelType = "Petrol",
                            FuelUsage = 6m,
                            Gearbox = "Automatic",
                            ImagePath = "/images/honda_crv.jpg",
                            IsAvailable = true,
                            LicensePlate = "FF-666-GG",
                            Name = "Honda CR-V",
                            PricePerDay = 27m,
                            Year = 2023
                        },
                        new
                        {
                            Id = new Guid("4d8c916f-a893-4b71-a472-9dd2a47f0a50"),
                            CategoryId = new Guid("006c7f03-2944-472c-9d78-9bb42c841c9c"),
                            ClassId = new Guid("9eb7fe2f-67f9-44c0-917f-077a5994a7c2"),
                            FuelType = "Petrol",
                            FuelUsage = 9m,
                            Gearbox = "Automatic",
                            ImagePath = "/images/mercedes_s_class.jpg",
                            IsAvailable = true,
                            LicensePlate = "GG-777-HH",
                            Name = "Mercedes-Benz S-Class",
                            PricePerDay = 85m,
                            Year = 2023
                        },
                        new
                        {
                            Id = new Guid("9a79c6e7-38ca-4c94-81c9-9d359fa692f6"),
                            CategoryId = new Guid("5f6b83b4-a93e-4a9d-8e46-46a4977c69a9"),
                            ClassId = new Guid("9eb7fe2f-67f9-44c0-917f-077a5994a7c2"),
                            FuelType = "Diesel",
                            FuelUsage = 8.5m,
                            Gearbox = "Automatic",
                            ImagePath = "/images/bmw_7_series.jpg",
                            IsAvailable = true,
                            LicensePlate = "HH-888-II",
                            Name = "BMW 7 Series",
                            PricePerDay = 80m,
                            Year = 2023
                        },
                        new
                        {
                            Id = new Guid("bcba206b-c474-48d8-85b1-5bf3a09891a1"),
                            CategoryId = new Guid("f1e8e72b-e7eb-45b6-b288-9559047444db"),
                            ClassId = new Guid("7abc5447-4fed-41ba-8c3a-5422da1ea921"),
                            FuelType = "Diesel",
                            FuelUsage = 8m,
                            Gearbox = "Manual",
                            ImagePath = "/images/vw_transporter.jpg",
                            IsAvailable = true,
                            LicensePlate = "II-999-JJ",
                            Name = "Volkswagen Transporter",
                            PricePerDay = 40m,
                            Year = 2021
                        },
                        new
                        {
                            Id = new Guid("44043075-a6cb-46f2-aadf-f3e1d610b8b0"),
                            CategoryId = new Guid("f1e8e72b-e7eb-45b6-b288-9559047444db"),
                            ClassId = new Guid("7abc5447-4fed-41ba-8c3a-5422da1ea921"),
                            FuelType = "Diesel",
                            FuelUsage = 7.5m,
                            Gearbox = "Manual",
                            ImagePath = "/images/ford_transit.jpg",
                            IsAvailable = true,
                            LicensePlate = "JJ-101-KK",
                            Name = "Ford Transit",
                            PricePerDay = 38m,
                            Year = 2022
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Models.CarClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarClass");

                    b.HasData(
                        new
                        {
                            Id = new Guid("86a055a5-19c2-48e5-9e0f-cf9c2d065a82"),
                            Name = "Small"
                        },
                        new
                        {
                            Id = new Guid("8c740178-11a2-4201-a8fb-bd35fbb7e604"),
                            Name = "Compact"
                        },
                        new
                        {
                            Id = new Guid("44174ecc-ba3f-4a7f-80e2-0d4b195d6e2f"),
                            Name = "SUV"
                        },
                        new
                        {
                            Id = new Guid("9eb7fe2f-67f9-44c0-917f-077a5994a7c2"),
                            Name = "Luxury"
                        },
                        new
                        {
                            Id = new Guid("7abc5447-4fed-41ba-8c3a-5422da1ea921"),
                            Name = "Van"
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Models.CarFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarFeature");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa943172-b74b-49f3-aec4-d11637e2bc98"),
                            CarId = new Guid("8039d225-76e1-4477-8236-e5c354153f91"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("d4ad237d-7a40-4a5b-baa3-9418a6c93da4"),
                            CarId = new Guid("8039d225-76e1-4477-8236-e5c354153f91"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("5d61f2c2-7826-43f0-92df-fe8c2c7c8085"),
                            CarId = new Guid("8039d225-76e1-4477-8236-e5c354153f91"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("b3a09dd1-8bef-44db-94d6-92ebb9d0c4e7"),
                            CarId = new Guid("8039d225-76e1-4477-8236-e5c354153f91"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("1e94c9a8-6a54-4703-98c2-a393a2208ce0"),
                            CarId = new Guid("348897f5-935a-4523-b69b-f13e9df249ab"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("50481f00-b38c-4ed6-b8a4-f5bb057b2fa3"),
                            CarId = new Guid("348897f5-935a-4523-b69b-f13e9df249ab"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("3157782e-e936-437f-bfaf-52ff7271c15e"),
                            CarId = new Guid("348897f5-935a-4523-b69b-f13e9df249ab"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("72eac944-4910-4054-837e-e356f155f65c"),
                            CarId = new Guid("348897f5-935a-4523-b69b-f13e9df249ab"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("b3745b9f-327f-4e9b-9cb3-f8cc0e3eb919"),
                            CarId = new Guid("e2a5c157-5f55-4543-af53-b549a0a9e75b"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("b55d852e-d4dc-4ad7-927c-bfd2bb15f6cd"),
                            CarId = new Guid("e2a5c157-5f55-4543-af53-b549a0a9e75b"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("b5ae7c6d-0546-47ed-894a-263db255e2cb"),
                            CarId = new Guid("e2a5c157-5f55-4543-af53-b549a0a9e75b"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("93fcdc19-375c-4675-8977-f51d8e7ceec9"),
                            CarId = new Guid("e2a5c157-5f55-4543-af53-b549a0a9e75b"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("fc6565dd-df9c-41a9-a1ea-0dc2f06ef5d3"),
                            CarId = new Guid("a185a4d2-5fc3-4c53-89d8-45c83e1a815c"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("6f76dde6-3e63-47c7-ba64-4f7fd651d5a4"),
                            CarId = new Guid("a185a4d2-5fc3-4c53-89d8-45c83e1a815c"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("169f5a2c-fdae-4510-aee2-cf4bc61bc184"),
                            CarId = new Guid("a185a4d2-5fc3-4c53-89d8-45c83e1a815c"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("c76af3ae-5175-456a-924d-b95d4d48c683"),
                            CarId = new Guid("a185a4d2-5fc3-4c53-89d8-45c83e1a815c"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("4d96f1a2-3b7b-4744-88f6-1ba13f1a973a"),
                            CarId = new Guid("9587fc17-a4c6-487c-be94-b7b6fc9e3678"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("83ea80ba-fce6-479d-8ffd-5dc080f4f2e8"),
                            CarId = new Guid("9587fc17-a4c6-487c-be94-b7b6fc9e3678"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("c6b33e51-3901-44b1-8d09-8bb84db6db88"),
                            CarId = new Guid("9587fc17-a4c6-487c-be94-b7b6fc9e3678"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("ea9b71fd-7ea7-44ce-b327-9d410bad05f6"),
                            CarId = new Guid("9587fc17-a4c6-487c-be94-b7b6fc9e3678"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("bf167d75-a746-4e02-9714-6b7dd00babff"),
                            CarId = new Guid("a62d2f76-6fe0-4e21-935b-6b0e2d933f01"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("e17ea914-5082-453d-938c-ff4456aaf0f7"),
                            CarId = new Guid("a62d2f76-6fe0-4e21-935b-6b0e2d933f01"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("31cf6dff-b3c0-4ad7-ae2f-aedea3622eae"),
                            CarId = new Guid("a62d2f76-6fe0-4e21-935b-6b0e2d933f01"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("56a0a808-8e86-4470-97a4-9f4060228df0"),
                            CarId = new Guid("a62d2f76-6fe0-4e21-935b-6b0e2d933f01"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("48b0b616-ab16-4da8-89e9-bb893f25c4a7"),
                            CarId = new Guid("4d8c916f-a893-4b71-a472-9dd2a47f0a50"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("d7bd88e9-b896-49c0-9347-ff8dae64fede"),
                            CarId = new Guid("4d8c916f-a893-4b71-a472-9dd2a47f0a50"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("77d363e0-6968-4258-aea6-a468ab7090d4"),
                            CarId = new Guid("4d8c916f-a893-4b71-a472-9dd2a47f0a50"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("682baafe-8403-4c09-9d6f-eeea43c933cb"),
                            CarId = new Guid("4d8c916f-a893-4b71-a472-9dd2a47f0a50"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("77d22e70-8233-47c9-a89e-5fa949b950d4"),
                            CarId = new Guid("9a79c6e7-38ca-4c94-81c9-9d359fa692f6"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("c17a1a7e-59c1-4c3f-9ab3-552c14d762b2"),
                            CarId = new Guid("9a79c6e7-38ca-4c94-81c9-9d359fa692f6"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("78e95788-f6c7-4446-b499-070e3b98b1a4"),
                            CarId = new Guid("9a79c6e7-38ca-4c94-81c9-9d359fa692f6"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("a3961e2a-fe54-434b-aded-99485bd2d90d"),
                            CarId = new Guid("9a79c6e7-38ca-4c94-81c9-9d359fa692f6"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("444e8b11-75e7-4964-b1ce-42883b9185f2"),
                            CarId = new Guid("bcba206b-c474-48d8-85b1-5bf3a09891a1"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("92746b75-1b14-4a2f-b0ab-d9c1c80061cb"),
                            CarId = new Guid("bcba206b-c474-48d8-85b1-5bf3a09891a1"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("6eb27f45-7283-46d2-bae6-f4ef62b2c964"),
                            CarId = new Guid("bcba206b-c474-48d8-85b1-5bf3a09891a1"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("cb906912-480e-4180-a0dd-7a0bbdcc4604"),
                            CarId = new Guid("bcba206b-c474-48d8-85b1-5bf3a09891a1"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("ad38ae4d-731b-4bbe-bbe1-f94fd8d6e336"),
                            CarId = new Guid("44043075-a6cb-46f2-aadf-f3e1d610b8b0"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("3908abaf-9ee6-48a3-814c-6d919e8c3713"),
                            CarId = new Guid("44043075-a6cb-46f2-aadf-f3e1d610b8b0"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("d98a0eeb-ae20-42c7-ad4f-82fd7b206499"),
                            CarId = new Guid("44043075-a6cb-46f2-aadf-f3e1d610b8b0"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("34a8c490-0f35-4a18-92f5-6d2f6be82a5f"),
                            CarId = new Guid("44043075-a6cb-46f2-aadf-f3e1d610b8b0"),
                            Name = "Electric Windows"
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5325d50a-c054-42c2-a3f2-7dde39ae8721"),
                            Name = "Economy"
                        },
                        new
                        {
                            Id = new Guid("44a0794d-5360-42ba-a276-a1b4cac7ff6e"),
                            Name = "Standard"
                        },
                        new
                        {
                            Id = new Guid("006c7f03-2944-472c-9d78-9bb42c841c9c"),
                            Name = "Luxury"
                        },
                        new
                        {
                            Id = new Guid("5f6b83b4-a93e-4a9d-8e46-46a4977c69a9"),
                            Name = "Business"
                        },
                        new
                        {
                            Id = new Guid("f1e8e72b-e7eb-45b6-b288-9559047444db"),
                            Name = "Family"
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReservationId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId1");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("CarRentalSystem.Models.PricingTier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxDays")
                        .HasColumnType("int");

                    b.Property<int>("MinDays")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("PricingTier");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e03c2ac6-ddf9-4474-870e-4c5abde1fb10"),
                            CarId = new Guid("8039d225-76e1-4477-8236-e5c354153f91"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 12m
                        },
                        new
                        {
                            Id = new Guid("df2f1940-ac65-40b3-9c87-9573b4dc35e7"),
                            CarId = new Guid("8039d225-76e1-4477-8236-e5c354153f91"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 10.8m
                        },
                        new
                        {
                            Id = new Guid("5ec8349c-4c83-4180-a784-cf6b38464043"),
                            CarId = new Guid("8039d225-76e1-4477-8236-e5c354153f91"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 10.20m
                        },
                        new
                        {
                            Id = new Guid("a715d5db-6b5e-4db6-b263-1e4d8470836d"),
                            CarId = new Guid("8039d225-76e1-4477-8236-e5c354153f91"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 9.6m
                        },
                        new
                        {
                            Id = new Guid("8a09bffe-9bdf-4153-800a-01416887f970"),
                            CarId = new Guid("8039d225-76e1-4477-8236-e5c354153f91"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 9.00m
                        },
                        new
                        {
                            Id = new Guid("ea4b7f50-4ce6-4806-8383-85787fea5c93"),
                            CarId = new Guid("348897f5-935a-4523-b69b-f13e9df249ab"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 10m
                        },
                        new
                        {
                            Id = new Guid("eeee6195-f8ae-4566-9957-183239b2cce5"),
                            CarId = new Guid("348897f5-935a-4523-b69b-f13e9df249ab"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 9.0m
                        },
                        new
                        {
                            Id = new Guid("c8887c64-87df-44ec-a5a9-5311ba94abd9"),
                            CarId = new Guid("348897f5-935a-4523-b69b-f13e9df249ab"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 8.50m
                        },
                        new
                        {
                            Id = new Guid("5b228642-a53f-43b2-82b7-6570199b9faf"),
                            CarId = new Guid("348897f5-935a-4523-b69b-f13e9df249ab"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 8.0m
                        },
                        new
                        {
                            Id = new Guid("b16529cc-e108-41ae-809f-e7e622587447"),
                            CarId = new Guid("348897f5-935a-4523-b69b-f13e9df249ab"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 7.50m
                        },
                        new
                        {
                            Id = new Guid("a1e16edc-6c38-4f68-be66-95eba8ffdc72"),
                            CarId = new Guid("e2a5c157-5f55-4543-af53-b549a0a9e75b"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 18m
                        },
                        new
                        {
                            Id = new Guid("2271d4c7-ae33-4bfa-b81a-dae1f06b79b9"),
                            CarId = new Guid("e2a5c157-5f55-4543-af53-b549a0a9e75b"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 16.2m
                        },
                        new
                        {
                            Id = new Guid("c23adba4-f770-4e03-9aac-0fa3a81c2fc2"),
                            CarId = new Guid("e2a5c157-5f55-4543-af53-b549a0a9e75b"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 15.30m
                        },
                        new
                        {
                            Id = new Guid("1dea457f-92c3-4a95-9e47-00218af2092d"),
                            CarId = new Guid("e2a5c157-5f55-4543-af53-b549a0a9e75b"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 14.4m
                        },
                        new
                        {
                            Id = new Guid("86b3ba12-8236-485c-a7c0-9e8970d35779"),
                            CarId = new Guid("e2a5c157-5f55-4543-af53-b549a0a9e75b"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 13.50m
                        },
                        new
                        {
                            Id = new Guid("34395a06-535c-4c82-a5d4-5113b2f987eb"),
                            CarId = new Guid("a185a4d2-5fc3-4c53-89d8-45c83e1a815c"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 17m
                        },
                        new
                        {
                            Id = new Guid("d1a85e79-d7e3-44fc-80da-b6653d350648"),
                            CarId = new Guid("a185a4d2-5fc3-4c53-89d8-45c83e1a815c"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 15.3m
                        },
                        new
                        {
                            Id = new Guid("65af53d4-aee8-4b5a-b6e1-31a9d39cfc19"),
                            CarId = new Guid("a185a4d2-5fc3-4c53-89d8-45c83e1a815c"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 14.45m
                        },
                        new
                        {
                            Id = new Guid("6d88bdd4-9ccc-422c-a20d-e71ee8cfca25"),
                            CarId = new Guid("a185a4d2-5fc3-4c53-89d8-45c83e1a815c"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 13.6m
                        },
                        new
                        {
                            Id = new Guid("0d5bbe3b-f54c-4694-808f-c0d89af75a61"),
                            CarId = new Guid("a185a4d2-5fc3-4c53-89d8-45c83e1a815c"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 12.75m
                        },
                        new
                        {
                            Id = new Guid("cf834d92-f7c7-4760-bb3a-ac00b45be4d8"),
                            CarId = new Guid("9587fc17-a4c6-487c-be94-b7b6fc9e3678"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 25m
                        },
                        new
                        {
                            Id = new Guid("fb5d0f43-1227-41de-9303-1531c3d16df5"),
                            CarId = new Guid("9587fc17-a4c6-487c-be94-b7b6fc9e3678"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 22.5m
                        },
                        new
                        {
                            Id = new Guid("53de1a13-41eb-48a9-b340-8181bb9f7adb"),
                            CarId = new Guid("9587fc17-a4c6-487c-be94-b7b6fc9e3678"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 21.25m
                        },
                        new
                        {
                            Id = new Guid("ee514a9d-7f0a-4c22-a1c3-76af8caaedd2"),
                            CarId = new Guid("9587fc17-a4c6-487c-be94-b7b6fc9e3678"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 20.0m
                        },
                        new
                        {
                            Id = new Guid("8d7a200c-c904-4e2c-8baa-4fff7432764b"),
                            CarId = new Guid("9587fc17-a4c6-487c-be94-b7b6fc9e3678"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 18.75m
                        },
                        new
                        {
                            Id = new Guid("3567fd71-7065-4b00-850f-ff5f9d12b5d6"),
                            CarId = new Guid("a62d2f76-6fe0-4e21-935b-6b0e2d933f01"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 27m
                        },
                        new
                        {
                            Id = new Guid("f28a1667-2a7d-405e-8ece-2080f7dd641a"),
                            CarId = new Guid("a62d2f76-6fe0-4e21-935b-6b0e2d933f01"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 24.3m
                        },
                        new
                        {
                            Id = new Guid("da21779d-f893-4aff-8e1d-43100d2a25d7"),
                            CarId = new Guid("a62d2f76-6fe0-4e21-935b-6b0e2d933f01"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 22.95m
                        },
                        new
                        {
                            Id = new Guid("3156b2d5-4318-4da6-a610-d49667e12272"),
                            CarId = new Guid("a62d2f76-6fe0-4e21-935b-6b0e2d933f01"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 21.6m
                        },
                        new
                        {
                            Id = new Guid("2ee69fb1-dce1-43c1-b3e6-3f5889acc6a0"),
                            CarId = new Guid("a62d2f76-6fe0-4e21-935b-6b0e2d933f01"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 20.25m
                        },
                        new
                        {
                            Id = new Guid("9c7cfe52-6293-4217-961f-e30ec670ca38"),
                            CarId = new Guid("4d8c916f-a893-4b71-a472-9dd2a47f0a50"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 85m
                        },
                        new
                        {
                            Id = new Guid("f0ee34ca-4bc8-4f71-9a1e-ee53cc83ba9f"),
                            CarId = new Guid("4d8c916f-a893-4b71-a472-9dd2a47f0a50"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 76.5m
                        },
                        new
                        {
                            Id = new Guid("a2e0a90c-d7db-4c27-8b55-d0a0e69708f1"),
                            CarId = new Guid("4d8c916f-a893-4b71-a472-9dd2a47f0a50"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 72.25m
                        },
                        new
                        {
                            Id = new Guid("a4cbcff0-3510-4fa6-bd58-ff20b3e63cb6"),
                            CarId = new Guid("4d8c916f-a893-4b71-a472-9dd2a47f0a50"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 68.0m
                        },
                        new
                        {
                            Id = new Guid("5d751021-c45f-48b5-a04d-6bf4019202bd"),
                            CarId = new Guid("4d8c916f-a893-4b71-a472-9dd2a47f0a50"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 63.75m
                        },
                        new
                        {
                            Id = new Guid("cc298124-08df-48ad-b4a7-190d1a7b5ac2"),
                            CarId = new Guid("9a79c6e7-38ca-4c94-81c9-9d359fa692f6"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 80m
                        },
                        new
                        {
                            Id = new Guid("6dff2f51-bcd9-4a59-bead-01c9bca9e024"),
                            CarId = new Guid("9a79c6e7-38ca-4c94-81c9-9d359fa692f6"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 72.0m
                        },
                        new
                        {
                            Id = new Guid("8ec44ac9-a8ef-483f-b997-8e6a171a2cce"),
                            CarId = new Guid("9a79c6e7-38ca-4c94-81c9-9d359fa692f6"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 68.00m
                        },
                        new
                        {
                            Id = new Guid("9fdd37b5-011f-423f-95bc-b3ca64ea697f"),
                            CarId = new Guid("9a79c6e7-38ca-4c94-81c9-9d359fa692f6"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 64.0m
                        },
                        new
                        {
                            Id = new Guid("a3332580-33a6-45da-856c-6fd284553b89"),
                            CarId = new Guid("9a79c6e7-38ca-4c94-81c9-9d359fa692f6"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 60.00m
                        },
                        new
                        {
                            Id = new Guid("60fe7e9c-c455-466a-9d76-c11e87b4e3bd"),
                            CarId = new Guid("bcba206b-c474-48d8-85b1-5bf3a09891a1"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 40m
                        },
                        new
                        {
                            Id = new Guid("c72c9545-4f57-4ea6-a792-e0bc8b5818c9"),
                            CarId = new Guid("bcba206b-c474-48d8-85b1-5bf3a09891a1"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 36.0m
                        },
                        new
                        {
                            Id = new Guid("659efff6-8f28-475a-a8de-dbff76851a2f"),
                            CarId = new Guid("bcba206b-c474-48d8-85b1-5bf3a09891a1"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 34.00m
                        },
                        new
                        {
                            Id = new Guid("b7463c76-6b5c-4ede-98c6-495c6545121b"),
                            CarId = new Guid("bcba206b-c474-48d8-85b1-5bf3a09891a1"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 32.0m
                        },
                        new
                        {
                            Id = new Guid("c8585406-13fa-4c6c-b19e-62e28d1efdc1"),
                            CarId = new Guid("bcba206b-c474-48d8-85b1-5bf3a09891a1"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 30.00m
                        },
                        new
                        {
                            Id = new Guid("2dc92b7b-1831-434d-bac6-983b4506a075"),
                            CarId = new Guid("44043075-a6cb-46f2-aadf-f3e1d610b8b0"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 38m
                        },
                        new
                        {
                            Id = new Guid("7b64b5da-59ba-4358-9b18-fc8216ee537f"),
                            CarId = new Guid("44043075-a6cb-46f2-aadf-f3e1d610b8b0"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 34.2m
                        },
                        new
                        {
                            Id = new Guid("e3e233b3-1999-48c3-922a-f3cb120c3f99"),
                            CarId = new Guid("44043075-a6cb-46f2-aadf-f3e1d610b8b0"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 32.30m
                        },
                        new
                        {
                            Id = new Guid("3b2b29cb-c31f-4525-a092-ab7c77bc91d4"),
                            CarId = new Guid("44043075-a6cb-46f2-aadf-f3e1d610b8b0"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 30.4m
                        },
                        new
                        {
                            Id = new Guid("3c5c902e-bede-4033-a520-13547a108954"),
                            CarId = new Guid("44043075-a6cb-46f2-aadf-f3e1d610b8b0"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 28.50m
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateGenerated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("CarRentalSystem.Models.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("CarRentalSystem.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarRentalSystem.Models.Car", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Category", "Category")
                        .WithMany("Cars")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalSystem.Models.CarClass", "Class")
                        .WithMany("Cars")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("CarRentalSystem.Models.CarFeature", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Car", "Car")
                        .WithMany("Features")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Payment", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId1");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("CarRentalSystem.Models.PricingTier", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Car", "Car")
                        .WithMany("PricingTiers")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Report", b =>
                {
                    b.HasOne("CarRentalSystem.Models.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Reservation", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Car", "Car")
                        .WithMany("Reservations")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalSystem.Models.Status", "Status")
                        .WithMany("Reservations")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalSystem.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Car");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Role", b =>
                {
                    b.HasOne("CarRentalSystem.Models.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CarRentalSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CarRentalSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CarRentalSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarRentalSystem.Models.Car", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("PricingTiers");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("CarRentalSystem.Models.CarClass", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Category", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Status", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("CarRentalSystem.Models.User", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using CarRentalSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRentalSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250120061726_AddNewPropertiesForUser")]
    partial class AddNewPropertiesForUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarRentalSystem.Models.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FuelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FuelUsage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Gearbox")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LicensePlate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClassId");

                    b.ToTable("Car");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4821964e-a04c-49d0-961a-9fcdfdea0816"),
                            CategoryId = new Guid("2788532a-e414-4578-b6a4-e7ae68d0d8ae"),
                            ClassId = new Guid("3786eedd-dae5-4448-adf6-5fcf3597d8b0"),
                            FuelType = "Petrol",
                            FuelUsage = 4m,
                            Gearbox = "Manual",
                            ImagePath = "/images/fiat_panda.jpg",
                            IsAvailable = true,
                            LicensePlate = "AA-111-BB",
                            Name = "Fiat Panda",
                            PricePerDay = 12m,
                            Year = 2020
                        },
                        new
                        {
                            Id = new Guid("0fd4c75f-f81c-405f-a443-4aea308f41a8"),
                            CategoryId = new Guid("2788532a-e414-4578-b6a4-e7ae68d0d8ae"),
                            ClassId = new Guid("3786eedd-dae5-4448-adf6-5fcf3597d8b0"),
                            FuelType = "Petrol",
                            FuelUsage = 3.8m,
                            Gearbox = "Manual",
                            ImagePath = "/images/hyundai_i10.jpg",
                            IsAvailable = true,
                            LicensePlate = "BB-222-CC",
                            Name = "Hyundai i10",
                            PricePerDay = 10m,
                            Year = 2019
                        },
                        new
                        {
                            Id = new Guid("9df8f859-4ccf-4039-b6cf-f02fe451bf81"),
                            CategoryId = new Guid("61b24e6a-5f4e-41ae-a1ae-44a4dc427c71"),
                            ClassId = new Guid("3ccf4055-af0e-437b-a0dc-a34c62de2f0b"),
                            FuelType = "Diesel",
                            FuelUsage = 5.1m,
                            Gearbox = "Automatic",
                            ImagePath = "/images/vw_golf.jpg",
                            IsAvailable = true,
                            LicensePlate = "CC-333-DD",
                            Name = "Volkswagen Golf",
                            PricePerDay = 18m,
                            Year = 2021
                        },
                        new
                        {
                            Id = new Guid("2e618d6b-4536-49d1-aa6a-ba2fe7cff3ad"),
                            CategoryId = new Guid("61b24e6a-5f4e-41ae-a1ae-44a4dc427c71"),
                            ClassId = new Guid("3ccf4055-af0e-437b-a0dc-a34c62de2f0b"),
                            FuelType = "Petrol",
                            FuelUsage = 4.8m,
                            Gearbox = "Manual",
                            ImagePath = "/images/ford_focus.jpg",
                            IsAvailable = true,
                            LicensePlate = "DD-444-EE",
                            Name = "Ford Focus",
                            PricePerDay = 17m,
                            Year = 2020
                        },
                        new
                        {
                            Id = new Guid("f58e50dc-9bc7-4948-a88e-2b70223df664"),
                            CategoryId = new Guid("314be868-8e21-45a6-b328-f0ea565bcf4f"),
                            ClassId = new Guid("62edc72f-97d0-4447-aaa7-4e70e723b063"),
                            FuelType = "Hybrid",
                            FuelUsage = 4.2m,
                            Gearbox = "Automatic",
                            ImagePath = "/images/toyota_rav4.jpg",
                            IsAvailable = true,
                            LicensePlate = "EE-555-FF",
                            Name = "Toyota RAV4",
                            PricePerDay = 25m,
                            Year = 2022
                        },
                        new
                        {
                            Id = new Guid("55ad9be3-f80c-4b9e-aa7d-ce6022c21c02"),
                            CategoryId = new Guid("314be868-8e21-45a6-b328-f0ea565bcf4f"),
                            ClassId = new Guid("62edc72f-97d0-4447-aaa7-4e70e723b063"),
                            FuelType = "Petrol",
                            FuelUsage = 6m,
                            Gearbox = "Automatic",
                            ImagePath = "/images/honda_crv.jpg",
                            IsAvailable = true,
                            LicensePlate = "FF-666-GG",
                            Name = "Honda CR-V",
                            PricePerDay = 27m,
                            Year = 2023
                        },
                        new
                        {
                            Id = new Guid("025f9a8a-1266-4dae-bfbc-f4f194a776e7"),
                            CategoryId = new Guid("8efea0c7-de81-4fb2-9a5c-0e226d7fc286"),
                            ClassId = new Guid("9605f476-cea8-4d49-b3a7-fe4e90e53f36"),
                            FuelType = "Petrol",
                            FuelUsage = 9m,
                            Gearbox = "Automatic",
                            ImagePath = "/images/mercedes_s_class.jpg",
                            IsAvailable = true,
                            LicensePlate = "GG-777-HH",
                            Name = "Mercedes-Benz S-Class",
                            PricePerDay = 85m,
                            Year = 2023
                        },
                        new
                        {
                            Id = new Guid("264259ad-40a2-4d6f-a960-0084fe09ed21"),
                            CategoryId = new Guid("1f8a5710-da48-4589-a7d4-88826d09e10e"),
                            ClassId = new Guid("9605f476-cea8-4d49-b3a7-fe4e90e53f36"),
                            FuelType = "Diesel",
                            FuelUsage = 8.5m,
                            Gearbox = "Automatic",
                            ImagePath = "/images/bmw_7_series.jpg",
                            IsAvailable = true,
                            LicensePlate = "HH-888-II",
                            Name = "BMW 7 Series",
                            PricePerDay = 80m,
                            Year = 2023
                        },
                        new
                        {
                            Id = new Guid("42d13d9b-92c1-459d-a6bb-33a28b800996"),
                            CategoryId = new Guid("314be868-8e21-45a6-b328-f0ea565bcf4f"),
                            ClassId = new Guid("869bd08d-27db-4b20-b6fe-5a0c5dcd63c5"),
                            FuelType = "Diesel",
                            FuelUsage = 8m,
                            Gearbox = "Manual",
                            ImagePath = "/images/vw_transporter.jpg",
                            IsAvailable = true,
                            LicensePlate = "II-999-JJ",
                            Name = "Volkswagen Transporter",
                            PricePerDay = 40m,
                            Year = 2021
                        },
                        new
                        {
                            Id = new Guid("ec6d5d08-718b-486b-997b-ff449eaae86d"),
                            CategoryId = new Guid("314be868-8e21-45a6-b328-f0ea565bcf4f"),
                            ClassId = new Guid("869bd08d-27db-4b20-b6fe-5a0c5dcd63c5"),
                            FuelType = "Diesel",
                            FuelUsage = 7.5m,
                            Gearbox = "Manual",
                            ImagePath = "/images/ford_transit.jpg",
                            IsAvailable = true,
                            LicensePlate = "JJ-101-KK",
                            Name = "Ford Transit",
                            PricePerDay = 38m,
                            Year = 2022
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Models.CarClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarClass");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3786eedd-dae5-4448-adf6-5fcf3597d8b0"),
                            Name = "Small"
                        },
                        new
                        {
                            Id = new Guid("3ccf4055-af0e-437b-a0dc-a34c62de2f0b"),
                            Name = "Compact"
                        },
                        new
                        {
                            Id = new Guid("62edc72f-97d0-4447-aaa7-4e70e723b063"),
                            Name = "SUV"
                        },
                        new
                        {
                            Id = new Guid("9605f476-cea8-4d49-b3a7-fe4e90e53f36"),
                            Name = "Luxury"
                        },
                        new
                        {
                            Id = new Guid("869bd08d-27db-4b20-b6fe-5a0c5dcd63c5"),
                            Name = "Van"
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Models.CarFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarFeature");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d56916d9-8edd-4fbc-a0e7-370b32326342"),
                            CarId = new Guid("4821964e-a04c-49d0-961a-9fcdfdea0816"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("b6a65876-4d07-4bde-9a79-c87ee4598953"),
                            CarId = new Guid("4821964e-a04c-49d0-961a-9fcdfdea0816"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("91f15f19-2f0c-4434-a0df-7f10a3debda0"),
                            CarId = new Guid("4821964e-a04c-49d0-961a-9fcdfdea0816"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("92f2bf73-2fc2-41b1-a55f-dd9cd144f3d2"),
                            CarId = new Guid("4821964e-a04c-49d0-961a-9fcdfdea0816"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("eadd505a-b208-4106-9437-0212b60ae97c"),
                            CarId = new Guid("0fd4c75f-f81c-405f-a443-4aea308f41a8"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("fd67e907-fac2-4f98-86bb-9ae667c39c7c"),
                            CarId = new Guid("0fd4c75f-f81c-405f-a443-4aea308f41a8"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("f45d1b51-6b79-47a6-87e4-91475f51f474"),
                            CarId = new Guid("0fd4c75f-f81c-405f-a443-4aea308f41a8"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("f91c8572-a319-42c5-80c7-7fdcbc5d4f1e"),
                            CarId = new Guid("0fd4c75f-f81c-405f-a443-4aea308f41a8"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("121b998a-d639-4673-a27a-6a3afb495d4e"),
                            CarId = new Guid("9df8f859-4ccf-4039-b6cf-f02fe451bf81"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("f09bc760-c393-45c9-8feb-c5bb000980ee"),
                            CarId = new Guid("9df8f859-4ccf-4039-b6cf-f02fe451bf81"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("3c07a321-7b14-4c38-88d8-dcdd2aa37f01"),
                            CarId = new Guid("9df8f859-4ccf-4039-b6cf-f02fe451bf81"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("8b632eb0-fc02-454e-b6be-580e6f5ff45f"),
                            CarId = new Guid("9df8f859-4ccf-4039-b6cf-f02fe451bf81"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("39597c2d-1ce3-40eb-8259-b17664616290"),
                            CarId = new Guid("2e618d6b-4536-49d1-aa6a-ba2fe7cff3ad"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("8c3d6568-b01e-49af-bd44-d30449596329"),
                            CarId = new Guid("2e618d6b-4536-49d1-aa6a-ba2fe7cff3ad"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("6af50e89-a99c-47dd-a105-a7a0a827eeca"),
                            CarId = new Guid("2e618d6b-4536-49d1-aa6a-ba2fe7cff3ad"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("5d0c7a44-da57-4573-83ce-36f2d1218afc"),
                            CarId = new Guid("2e618d6b-4536-49d1-aa6a-ba2fe7cff3ad"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("564495f7-ae5f-45b4-9945-bee352acba0d"),
                            CarId = new Guid("f58e50dc-9bc7-4948-a88e-2b70223df664"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("e14f31c3-3eea-4670-86a2-6b6aa9aadf50"),
                            CarId = new Guid("f58e50dc-9bc7-4948-a88e-2b70223df664"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("10c63bad-460b-4924-86b3-02358859a511"),
                            CarId = new Guid("f58e50dc-9bc7-4948-a88e-2b70223df664"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("92667f3d-5086-49dc-a662-f83ed9a498a5"),
                            CarId = new Guid("f58e50dc-9bc7-4948-a88e-2b70223df664"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("eff9e5cc-6137-4d6e-86ba-64e9baeea5b2"),
                            CarId = new Guid("55ad9be3-f80c-4b9e-aa7d-ce6022c21c02"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("ded3edac-0901-4e67-aead-5a4eb954bcb8"),
                            CarId = new Guid("55ad9be3-f80c-4b9e-aa7d-ce6022c21c02"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("830dc659-318b-42ee-96b6-86cd8070b580"),
                            CarId = new Guid("55ad9be3-f80c-4b9e-aa7d-ce6022c21c02"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("2390d361-e454-479c-b976-d3105566b4df"),
                            CarId = new Guid("55ad9be3-f80c-4b9e-aa7d-ce6022c21c02"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("9bc6932f-d724-4da9-8292-85c2d82759aa"),
                            CarId = new Guid("025f9a8a-1266-4dae-bfbc-f4f194a776e7"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("674d5f72-5cc2-4ad4-a22e-fcd14f798721"),
                            CarId = new Guid("025f9a8a-1266-4dae-bfbc-f4f194a776e7"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("d8c0925a-f6ac-4e7d-8074-3c99ff2a5d48"),
                            CarId = new Guid("025f9a8a-1266-4dae-bfbc-f4f194a776e7"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("355a3842-4f37-47f0-ad7a-9c60a7b57ca1"),
                            CarId = new Guid("025f9a8a-1266-4dae-bfbc-f4f194a776e7"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("4441721a-b5af-4a79-9f29-01d32f011115"),
                            CarId = new Guid("264259ad-40a2-4d6f-a960-0084fe09ed21"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("8d3d19cf-4550-4000-ace5-371d977f2e28"),
                            CarId = new Guid("264259ad-40a2-4d6f-a960-0084fe09ed21"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("a102ee4a-3cf9-498b-ae09-1f61cb806cfa"),
                            CarId = new Guid("264259ad-40a2-4d6f-a960-0084fe09ed21"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("cd7c5070-b9c0-4c73-9505-99a33c5edf27"),
                            CarId = new Guid("264259ad-40a2-4d6f-a960-0084fe09ed21"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("a3ee25d7-cdc8-4d39-849a-52d8181abd01"),
                            CarId = new Guid("42d13d9b-92c1-459d-a6bb-33a28b800996"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("b9a6381e-e935-4a6d-82ef-c4edea93986a"),
                            CarId = new Guid("42d13d9b-92c1-459d-a6bb-33a28b800996"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("ec2d9569-d6d4-4f61-a958-a5c8df92ff43"),
                            CarId = new Guid("42d13d9b-92c1-459d-a6bb-33a28b800996"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("d28661b6-72d9-4feb-bf92-df7def4bdb23"),
                            CarId = new Guid("42d13d9b-92c1-459d-a6bb-33a28b800996"),
                            Name = "Electric Windows"
                        },
                        new
                        {
                            Id = new Guid("44bcf259-fa2c-4475-926d-2299910cca24"),
                            CarId = new Guid("ec6d5d08-718b-486b-997b-ff449eaae86d"),
                            Name = "A/C"
                        },
                        new
                        {
                            Id = new Guid("aea1909a-a288-478f-92f8-ec781a0fe2c7"),
                            CarId = new Guid("ec6d5d08-718b-486b-997b-ff449eaae86d"),
                            Name = "Airbags"
                        },
                        new
                        {
                            Id = new Guid("50149a75-7a92-4045-9c5c-5df9490b051a"),
                            CarId = new Guid("ec6d5d08-718b-486b-997b-ff449eaae86d"),
                            Name = "Central Locking"
                        },
                        new
                        {
                            Id = new Guid("90e8cc31-9924-418f-b4c6-6cf8922d33b2"),
                            CarId = new Guid("ec6d5d08-718b-486b-997b-ff449eaae86d"),
                            Name = "Electric Windows"
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2788532a-e414-4578-b6a4-e7ae68d0d8ae"),
                            Name = "Economy"
                        },
                        new
                        {
                            Id = new Guid("61b24e6a-5f4e-41ae-a1ae-44a4dc427c71"),
                            Name = "Standard"
                        },
                        new
                        {
                            Id = new Guid("8efea0c7-de81-4fb2-9a5c-0e226d7fc286"),
                            Name = "Luxury"
                        },
                        new
                        {
                            Id = new Guid("1f8a5710-da48-4589-a7d4-88826d09e10e"),
                            Name = "Business"
                        },
                        new
                        {
                            Id = new Guid("314be868-8e21-45a6-b328-f0ea565bcf4f"),
                            Name = "Family"
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReservationId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId1");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("CarRentalSystem.Models.PricingTier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxDays")
                        .HasColumnType("int");

                    b.Property<int>("MinDays")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("PricingTier");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5658fd35-0090-40ea-85ae-aee51d43b1c2"),
                            CarId = new Guid("4821964e-a04c-49d0-961a-9fcdfdea0816"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 12m
                        },
                        new
                        {
                            Id = new Guid("afa31e51-ce85-42d5-a6e8-5aeacf9ff631"),
                            CarId = new Guid("4821964e-a04c-49d0-961a-9fcdfdea0816"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 10.8m
                        },
                        new
                        {
                            Id = new Guid("007e177b-aa00-4250-947a-ab7502a00285"),
                            CarId = new Guid("4821964e-a04c-49d0-961a-9fcdfdea0816"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 10.20m
                        },
                        new
                        {
                            Id = new Guid("a068ebb9-4267-478d-9d25-0a89884d26d9"),
                            CarId = new Guid("4821964e-a04c-49d0-961a-9fcdfdea0816"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 9.6m
                        },
                        new
                        {
                            Id = new Guid("0c86b921-423c-4b4c-966d-8e53c460900a"),
                            CarId = new Guid("4821964e-a04c-49d0-961a-9fcdfdea0816"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 9.00m
                        },
                        new
                        {
                            Id = new Guid("56809fbe-4766-41cc-ae40-dd6da55f0a3d"),
                            CarId = new Guid("0fd4c75f-f81c-405f-a443-4aea308f41a8"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 10m
                        },
                        new
                        {
                            Id = new Guid("d41df52f-6afe-4fca-bef8-976bfaf2d002"),
                            CarId = new Guid("0fd4c75f-f81c-405f-a443-4aea308f41a8"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 9.0m
                        },
                        new
                        {
                            Id = new Guid("2f8298db-4b21-4aa9-a9ef-d44562c629bf"),
                            CarId = new Guid("0fd4c75f-f81c-405f-a443-4aea308f41a8"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 8.50m
                        },
                        new
                        {
                            Id = new Guid("c1853def-69ef-487b-abe2-b09727582c4e"),
                            CarId = new Guid("0fd4c75f-f81c-405f-a443-4aea308f41a8"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 8.0m
                        },
                        new
                        {
                            Id = new Guid("6644c8c3-7b69-4cab-8d26-c2eada777b8a"),
                            CarId = new Guid("0fd4c75f-f81c-405f-a443-4aea308f41a8"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 7.50m
                        },
                        new
                        {
                            Id = new Guid("00da3661-f0d1-4b50-8d71-8951c5dbb2a7"),
                            CarId = new Guid("9df8f859-4ccf-4039-b6cf-f02fe451bf81"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 18m
                        },
                        new
                        {
                            Id = new Guid("f059c689-d8fd-4127-81fe-15b674d16165"),
                            CarId = new Guid("9df8f859-4ccf-4039-b6cf-f02fe451bf81"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 16.2m
                        },
                        new
                        {
                            Id = new Guid("12b29e97-eae5-484e-a488-a39cdc47cc93"),
                            CarId = new Guid("9df8f859-4ccf-4039-b6cf-f02fe451bf81"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 15.30m
                        },
                        new
                        {
                            Id = new Guid("15461d17-e243-4142-bb75-92ff4f88385d"),
                            CarId = new Guid("9df8f859-4ccf-4039-b6cf-f02fe451bf81"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 14.4m
                        },
                        new
                        {
                            Id = new Guid("f38eae32-8347-4e24-9779-263b450d2c9b"),
                            CarId = new Guid("9df8f859-4ccf-4039-b6cf-f02fe451bf81"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 13.50m
                        },
                        new
                        {
                            Id = new Guid("a3e6bbcf-9318-4f00-9726-e49411731ff1"),
                            CarId = new Guid("2e618d6b-4536-49d1-aa6a-ba2fe7cff3ad"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 17m
                        },
                        new
                        {
                            Id = new Guid("574d07ec-564c-4f42-8eee-ef279c86d6fe"),
                            CarId = new Guid("2e618d6b-4536-49d1-aa6a-ba2fe7cff3ad"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 15.3m
                        },
                        new
                        {
                            Id = new Guid("a5c44dab-9b7e-41d0-b2bb-284e737bd4a1"),
                            CarId = new Guid("2e618d6b-4536-49d1-aa6a-ba2fe7cff3ad"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 14.45m
                        },
                        new
                        {
                            Id = new Guid("a555b82f-3272-44d0-b6e0-6d77a7716d40"),
                            CarId = new Guid("2e618d6b-4536-49d1-aa6a-ba2fe7cff3ad"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 13.6m
                        },
                        new
                        {
                            Id = new Guid("f092dfdd-0a58-40c5-bd42-8d5a9d2e128a"),
                            CarId = new Guid("2e618d6b-4536-49d1-aa6a-ba2fe7cff3ad"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 12.75m
                        },
                        new
                        {
                            Id = new Guid("a278987f-b2ba-4d74-a62d-1c34f3b64a24"),
                            CarId = new Guid("f58e50dc-9bc7-4948-a88e-2b70223df664"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 25m
                        },
                        new
                        {
                            Id = new Guid("4246290c-6449-4101-8415-f5d7b3563c9f"),
                            CarId = new Guid("f58e50dc-9bc7-4948-a88e-2b70223df664"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 22.5m
                        },
                        new
                        {
                            Id = new Guid("8ea9341a-fc36-406c-b306-c33bb73ab6bc"),
                            CarId = new Guid("f58e50dc-9bc7-4948-a88e-2b70223df664"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 21.25m
                        },
                        new
                        {
                            Id = new Guid("b70636fc-55fc-4b0a-9927-c42bfc10875e"),
                            CarId = new Guid("f58e50dc-9bc7-4948-a88e-2b70223df664"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 20.0m
                        },
                        new
                        {
                            Id = new Guid("c1368b3e-28ef-4dbe-8460-9e82531f95f3"),
                            CarId = new Guid("f58e50dc-9bc7-4948-a88e-2b70223df664"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 18.75m
                        },
                        new
                        {
                            Id = new Guid("5c867eb0-269c-45a9-b66f-3b1c69f6492e"),
                            CarId = new Guid("55ad9be3-f80c-4b9e-aa7d-ce6022c21c02"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 27m
                        },
                        new
                        {
                            Id = new Guid("e78ad0d2-9f2c-4bd1-a3a3-7fa9eecf1cfe"),
                            CarId = new Guid("55ad9be3-f80c-4b9e-aa7d-ce6022c21c02"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 24.3m
                        },
                        new
                        {
                            Id = new Guid("4d955e69-d870-48b4-8092-25b7f70bf682"),
                            CarId = new Guid("55ad9be3-f80c-4b9e-aa7d-ce6022c21c02"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 22.95m
                        },
                        new
                        {
                            Id = new Guid("903eeb58-56cd-4e78-82e9-0e6282576a83"),
                            CarId = new Guid("55ad9be3-f80c-4b9e-aa7d-ce6022c21c02"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 21.6m
                        },
                        new
                        {
                            Id = new Guid("f7cd8260-c305-4969-9647-c086e41a3827"),
                            CarId = new Guid("55ad9be3-f80c-4b9e-aa7d-ce6022c21c02"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 20.25m
                        },
                        new
                        {
                            Id = new Guid("16982966-88dd-4b9b-b936-e0d86e254f36"),
                            CarId = new Guid("025f9a8a-1266-4dae-bfbc-f4f194a776e7"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 85m
                        },
                        new
                        {
                            Id = new Guid("44a06d42-c1e1-42df-869d-80ba452a6769"),
                            CarId = new Guid("025f9a8a-1266-4dae-bfbc-f4f194a776e7"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 76.5m
                        },
                        new
                        {
                            Id = new Guid("a260f200-66ce-4377-9a9d-a2f4e18d13fe"),
                            CarId = new Guid("025f9a8a-1266-4dae-bfbc-f4f194a776e7"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 72.25m
                        },
                        new
                        {
                            Id = new Guid("9b355c43-eecf-4a5b-844b-9028aa9f63c0"),
                            CarId = new Guid("025f9a8a-1266-4dae-bfbc-f4f194a776e7"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 68.0m
                        },
                        new
                        {
                            Id = new Guid("74ecd453-a249-4015-871c-11ba98cae745"),
                            CarId = new Guid("025f9a8a-1266-4dae-bfbc-f4f194a776e7"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 63.75m
                        },
                        new
                        {
                            Id = new Guid("806fa1ab-fb76-4847-a29c-3505a05adca3"),
                            CarId = new Guid("264259ad-40a2-4d6f-a960-0084fe09ed21"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 80m
                        },
                        new
                        {
                            Id = new Guid("ff9afb9c-9071-47f6-bcdc-0c3f34b4e7da"),
                            CarId = new Guid("264259ad-40a2-4d6f-a960-0084fe09ed21"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 72.0m
                        },
                        new
                        {
                            Id = new Guid("cc96a8e2-3a95-4bfb-966f-dfb5b87a3253"),
                            CarId = new Guid("264259ad-40a2-4d6f-a960-0084fe09ed21"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 68.00m
                        },
                        new
                        {
                            Id = new Guid("c84d561e-b81b-474e-aa13-f3fa916fb384"),
                            CarId = new Guid("264259ad-40a2-4d6f-a960-0084fe09ed21"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 64.0m
                        },
                        new
                        {
                            Id = new Guid("860cf1ee-5b6a-49c9-b893-e4d971d0b26c"),
                            CarId = new Guid("264259ad-40a2-4d6f-a960-0084fe09ed21"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 60.00m
                        },
                        new
                        {
                            Id = new Guid("3133fb4a-57a8-4982-bed2-4344b7c74893"),
                            CarId = new Guid("42d13d9b-92c1-459d-a6bb-33a28b800996"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 40m
                        },
                        new
                        {
                            Id = new Guid("f30c1894-dcf3-4baa-b128-f55d726d2335"),
                            CarId = new Guid("42d13d9b-92c1-459d-a6bb-33a28b800996"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 36.0m
                        },
                        new
                        {
                            Id = new Guid("159e7fbb-0688-4737-a814-81e145bc908e"),
                            CarId = new Guid("42d13d9b-92c1-459d-a6bb-33a28b800996"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 34.00m
                        },
                        new
                        {
                            Id = new Guid("85390edd-67f4-43c7-9e3f-1fb60d2d168c"),
                            CarId = new Guid("42d13d9b-92c1-459d-a6bb-33a28b800996"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 32.0m
                        },
                        new
                        {
                            Id = new Guid("bc755162-7ef1-4a41-838c-dc13bec52451"),
                            CarId = new Guid("42d13d9b-92c1-459d-a6bb-33a28b800996"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 30.00m
                        },
                        new
                        {
                            Id = new Guid("f43414b7-5109-4b4c-9499-c8bee51afb4b"),
                            CarId = new Guid("ec6d5d08-718b-486b-997b-ff449eaae86d"),
                            MaxDays = 3,
                            MinDays = 1,
                            PricePerDay = 38m
                        },
                        new
                        {
                            Id = new Guid("9835f13b-408f-42a4-96b5-8927597f8429"),
                            CarId = new Guid("ec6d5d08-718b-486b-997b-ff449eaae86d"),
                            MaxDays = 10,
                            MinDays = 4,
                            PricePerDay = 34.2m
                        },
                        new
                        {
                            Id = new Guid("12da5704-248d-4a4b-89f4-1bf812fcf7a8"),
                            CarId = new Guid("ec6d5d08-718b-486b-997b-ff449eaae86d"),
                            MaxDays = 15,
                            MinDays = 11,
                            PricePerDay = 32.30m
                        },
                        new
                        {
                            Id = new Guid("72acedb8-7e4f-4ff9-b24b-807997b94048"),
                            CarId = new Guid("ec6d5d08-718b-486b-997b-ff449eaae86d"),
                            MaxDays = 20,
                            MinDays = 16,
                            PricePerDay = 30.4m
                        },
                        new
                        {
                            Id = new Guid("d6dd9da5-bcfc-4bf5-b219-e11ea459b395"),
                            CarId = new Guid("ec6d5d08-718b-486b-997b-ff449eaae86d"),
                            MaxDays = 365,
                            MinDays = 21,
                            PricePerDay = 28.50m
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateGenerated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("CarRentalSystem.Models.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("CarRentalSystem.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarRentalSystem.Models.Car", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Category", "Category")
                        .WithMany("Cars")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalSystem.Models.CarClass", "Class")
                        .WithMany("Cars")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("CarRentalSystem.Models.CarFeature", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Car", "Car")
                        .WithMany("Features")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Payment", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId1");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("CarRentalSystem.Models.PricingTier", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Car", "Car")
                        .WithMany("PricingTiers")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Report", b =>
                {
                    b.HasOne("CarRentalSystem.Models.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Reservation", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalSystem.Models.Status", "Status")
                        .WithMany("Reservations")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalSystem.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Car");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Role", b =>
                {
                    b.HasOne("CarRentalSystem.Models.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CarRentalSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CarRentalSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CarRentalSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarRentalSystem.Models.Car", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("PricingTiers");
                });

            modelBuilder.Entity("CarRentalSystem.Models.CarClass", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Category", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Status", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("CarRentalSystem.Models.User", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
